From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Sat, 15 May 2021 14:15:08 +0200
Subject: [PATCH] {PRAGMA} include/linux/randomize_kstack: ignore -Walloca
 warning

clang 11.1.0 reports warning about using alloca(). This is fine, so
ignore it.

While at it, add the infrastructure to ignore warnings when building
with clang.
---
 include/linux/compiler-clang.h   | 10 ++++++++++
 include/linux/compiler_types.h   |  4 ++++
 include/linux/randomize_kstack.h |  4 ++++
 3 files changed, 18 insertions(+)

diff --git a/include/linux/compiler-clang.h b/include/linux/compiler-clang.h
index babb1347148c..052b69e7d194 100644
--- a/include/linux/compiler-clang.h
+++ b/include/linux/compiler-clang.h
@@ -5,6 +5,10 @@
 
 /* Compiler specific definitions for Clang compiler */
 
+#define CLANG_VERSION (__clang_major__ * 10000		\
+		     + __clang_minor__ * 100	\
+		     + __clang_patchlevel__)
+
 /* same as gcc, this was present in clang-2.6 so we can assume it works
  * with any version that can compile the kernel
  */
@@ -85,6 +89,12 @@
 #define __diag_str(s)		__diag_str1(s)
 #define __diag(s)		_Pragma(__diag_str(clang diagnostic s))
 
+#if CONFIG_CLANG_VERSION >= 100000
+#define __diag_clang_10(s)	__diag(s)
+#else
+#define __diag_clang_10(s)
+#endif
+
 #if CONFIG_CLANG_VERSION >= 110000
 #define __diag_clang_11(s)	__diag(s)
 #else
diff --git a/include/linux/compiler_types.h b/include/linux/compiler_types.h
index 1c2c33ae1b37..88f589997c47 100644
--- a/include/linux/compiler_types.h
+++ b/include/linux/compiler_types.h
@@ -364,6 +364,10 @@ struct ftrace_likely_data {
 #define __diag_GCC(version, severity, string)
 #endif
 
+#ifndef __diag_clang
+#define __diag_clang(version, severity, string)
+#endif
+
 #define __diag_push()	__diag(push)
 #define __diag_pop()	__diag(pop)
 
diff --git a/include/linux/randomize_kstack.h b/include/linux/randomize_kstack.h
index 1468caf001c0..3022077c3101 100644
--- a/include/linux/randomize_kstack.h
+++ b/include/linux/randomize_kstack.h
@@ -49,7 +49,11 @@ DECLARE_PER_CPU(u32, kstack_offset);
 	if (static_branch_maybe(CONFIG_RANDOMIZE_KSTACK_OFFSET_DEFAULT,	\
 				&randomize_kstack_offset)) {		\
 		u32 offset = raw_cpu_read(kstack_offset);		\
+		__diag_push() \
+		__diag_ignore(clang, 10, "-Walloca", \
+			      "Using alloc is fine here") \
 		u8 *ptr = __kstack_alloca(KSTACK_OFFSET_MAX(offset));	\
+		__diag_pop() \
 		/* Keep allocation even after "ptr" loses scope. */	\
 		asm volatile("" :: "r"(ptr) : "memory");		\
 	}								\
-- 
