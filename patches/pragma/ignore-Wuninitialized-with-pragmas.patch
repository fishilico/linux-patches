From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Sat, 21 Mar 2015 15:59:39 +0800
Subject: [PATCH] {PRAGMA} ignore -Wuninitialized with pragmas

---
 drivers/block/drbd/drbd_receiver.c |  3 +++
 include/linux/completion.h         | 13 +++++++++++++
 include/linux/kthread.h            |  8 ++++++++
 include/linux/wait.h               |  8 ++++++++
 kernel/kthread.c                   |  6 ++++++
 kernel/smp.c                       |  3 +++
 kernel/workqueue.c                 |  3 +++
 7 files changed, 44 insertions(+)

diff --git a/drivers/block/drbd/drbd_receiver.c b/drivers/block/drbd/drbd_receiver.c
index 6df2539e215b..a8db37ff2e41 100644
--- a/drivers/block/drbd/drbd_receiver.c
+++ b/drivers/block/drbd/drbd_receiver.c
@@ -929,10 +929,13 @@ static int conn_connect(struct drbd_connection *connection)
 	int vnr, timeout, h;
 	bool discard_my_data, ok;
 	enum drbd_state_rv rv;
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wuninitialized"
 	struct accept_wait_data ad = {
 		.connection = connection,
 		.door_bell = COMPLETION_INITIALIZER_ONSTACK(ad.door_bell),
 	};
+#pragma GCC diagnostic pop
 
 	clear_bit(DISCONNECT_SENT, &connection->flags);
 	if (conn_request_state(connection, NS(conn, C_WF_CONNECTION), CS_VERBOSE) < SS_SUCCESS)
diff --git a/include/linux/completion.h b/include/linux/completion.h
index 51d9ab079629..17a32f3f69d6 100644
--- a/include/linux/completion.h
+++ b/include/linux/completion.h
@@ -65,10 +65,23 @@ static inline void complete_release(struct completion *x) {}
  * stack.
  */
 #ifdef CONFIG_LOCKDEP
+#ifdef __clang__
+# define DECLARE_COMPLETION_ONSTACK(work) \
+_Pragma("GCC diagnostic push") \
+_Pragma("GCC diagnostic ignored \"-Wuninitialized\"") \
+	struct completion work = COMPLETION_INITIALIZER_ONSTACK(work) \
+_Pragma("GCC diagnostic pop")
+# define DECLARE_COMPLETION_ONSTACK_MAP(work, map) \
+_Pragma("GCC diagnostic push") \
+_Pragma("GCC diagnostic ignored \"-Wuninitialized\"") \
+	struct completion work = COMPLETION_INITIALIZER_ONSTACK_MAP(work, map) \
+_Pragma("GCC diagnostic pop")
+#else
 # define DECLARE_COMPLETION_ONSTACK(work) \
 	struct completion work = COMPLETION_INITIALIZER_ONSTACK(work)
 # define DECLARE_COMPLETION_ONSTACK_MAP(work, map) \
 	struct completion work = COMPLETION_INITIALIZER_ONSTACK_MAP(work, map)
+#endif
 #else
 # define DECLARE_COMPLETION_ONSTACK(work) DECLARE_COMPLETION(work)
 # define DECLARE_COMPLETION_ONSTACK_MAP(work, map) DECLARE_COMPLETION(work)
diff --git a/include/linux/kthread.h b/include/linux/kthread.h
index 3df4ea04716f..12bcba1ab7a5 100644
--- a/include/linux/kthread.h
+++ b/include/linux/kthread.h
@@ -175,8 +175,16 @@ struct kthread_delayed_work {
 #ifdef CONFIG_LOCKDEP
 # define KTHREAD_WORKER_INIT_ONSTACK(worker)				\
 	({ kthread_init_worker(&worker); worker; })
+#ifdef __clang__
+# define DEFINE_KTHREAD_WORKER_ONSTACK(worker)				\
+_Pragma("GCC diagnostic push") \
+_Pragma("GCC diagnostic ignored \"-Wuninitialized\"") \
+	struct kthread_worker worker = KTHREAD_WORKER_INIT_ONSTACK(worker) \
+_Pragma("GCC diagnostic pop")
+#else
 # define DEFINE_KTHREAD_WORKER_ONSTACK(worker)				\
 	struct kthread_worker worker = KTHREAD_WORKER_INIT_ONSTACK(worker)
+#endif
 #else
 # define DEFINE_KTHREAD_WORKER_ONSTACK(worker) DEFINE_KTHREAD_WORKER(worker)
 #endif
diff --git a/include/linux/wait.h b/include/linux/wait.h
index 851e07da2583..a3a94be95cf7 100644
--- a/include/linux/wait.h
+++ b/include/linux/wait.h
@@ -73,8 +73,16 @@ extern void __init_waitqueue_head(struct wait_queue_head *wq_head, const char *n
 #ifdef CONFIG_LOCKDEP
 # define __WAIT_QUEUE_HEAD_INIT_ONSTACK(name) \
 	({ init_waitqueue_head(&name); name; })
+#ifdef __clang__
+# define DECLARE_WAIT_QUEUE_HEAD_ONSTACK(name) \
+_Pragma("GCC diagnostic push") \
+_Pragma("GCC diagnostic ignored \"-Wuninitialized\"") \
+	struct wait_queue_head name = __WAIT_QUEUE_HEAD_INIT_ONSTACK(name) \
+_Pragma("GCC diagnostic pop")
+#else
 # define DECLARE_WAIT_QUEUE_HEAD_ONSTACK(name) \
 	struct wait_queue_head name = __WAIT_QUEUE_HEAD_INIT_ONSTACK(name)
+#endif
 #else
 # define DECLARE_WAIT_QUEUE_HEAD_ONSTACK(name) DECLARE_WAIT_QUEUE_HEAD(name)
 #endif
diff --git a/kernel/kthread.c b/kernel/kthread.c
index dd75ef51c5a2..7dc5be7ffced 100644
--- a/kernel/kthread.c
+++ b/kernel/kthread.c
@@ -1133,10 +1133,13 @@ static void kthread_flush_work_fn(struct kthread_work *work)
  */
 void kthread_flush_work(struct kthread_work *work)
 {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wuninitialized"
 	struct kthread_flush_work fwork = {
 		KTHREAD_WORK_INIT(fwork.work, kthread_flush_work_fn),
 		COMPLETION_INITIALIZER_ONSTACK(fwork.done),
 	};
+#pragma GCC diagnostic pop
 	struct kthread_worker *worker;
 	bool noop = false;
 
@@ -1370,10 +1373,13 @@ EXPORT_SYMBOL_GPL(kthread_cancel_delayed_work_sync);
  */
 void kthread_flush_worker(struct kthread_worker *worker)
 {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wuninitialized"
 	struct kthread_flush_work fwork = {
 		KTHREAD_WORK_INIT(fwork.work, kthread_flush_work_fn),
 		COMPLETION_INITIALIZER_ONSTACK(fwork.done),
 	};
+#pragma GCC diagnostic pop
 
 	kthread_queue_work(worker, &fwork.work);
 	wait_for_completion(&fwork.done);
diff --git a/kernel/smp.c b/kernel/smp.c
index 01a7c1706a58..26f85ac77c08 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -1217,12 +1217,15 @@ static void smp_call_on_cpu_callback(struct work_struct *work)
 
 int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par, bool phys)
 {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wuninitialized"
 	struct smp_call_on_cpu_struct sscs = {
 		.done = COMPLETION_INITIALIZER_ONSTACK(sscs.done),
 		.func = func,
 		.data = par,
 		.cpu  = phys ? cpu : -1,
 	};
+#pragma GCC diagnostic pop
 
 	INIT_WORK_ONSTACK(&sscs.work, smp_call_on_cpu_callback);
 
diff --git a/kernel/workqueue.c b/kernel/workqueue.c
index 33f1106b4f99..ff9820343a25 100644
--- a/kernel/workqueue.c
+++ b/kernel/workqueue.c
@@ -2814,11 +2814,14 @@ static bool flush_workqueue_prep_pwqs(struct workqueue_struct *wq,
  */
 void flush_workqueue(struct workqueue_struct *wq)
 {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wuninitialized"
 	struct wq_flusher this_flusher = {
 		.list = LIST_HEAD_INIT(this_flusher.list),
 		.flush_color = -1,
 		.done = COMPLETION_INITIALIZER_ONSTACK_MAP(this_flusher.done, wq->lockdep_map),
 	};
+#pragma GCC diagnostic pop
 	int next_color;
 
 	if (WARN_ON(!wq_online))
-- 
