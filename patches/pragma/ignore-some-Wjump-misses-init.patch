From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Wed, 3 Jun 2015 10:57:18 +0800
Subject: [PATCH] {PRAGMA} ignore some -Wjump-misses-init

---
 fs/ext4/ialloc.c      | 8 ++++++++
 kernel/bpf/verifier.c | 9 +++++++++
 lib/rhashtable.c      | 1 +
 mm/mmap.c             | 8 ++++++++
 net/core/skbuff.c     | 8 ++++++++
 net/ipv4/fib_trie.c   | 7 +++++++
 net/sched/cls_u32.c   | 8 ++++++++
 7 files changed, 49 insertions(+)

diff --git a/fs/ext4/ialloc.c b/fs/ext4/ialloc.c
index 2addcb8730e1..17577ed31eeb 100644
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@ -431,6 +431,11 @@ static int find_group_orlov(struct super_block *sb, struct inode *parent,
 	int flex_size = ext4_flex_bg_size(sbi);
 	struct dx_hash_info hinfo;
 
+/* Variables "ret" and "found_flex_bg" are not initialized but not used when the goto found_flex_bg branch is taken */
+#ifndef __clang__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wjump-misses-init"
+#endif
 	ngroups = real_ngroups;
 	if (flex_size > 1) {
 		ngroups = (real_ngroups + flex_size - 1) >>
@@ -558,6 +563,9 @@ static int find_group_orlov(struct super_block *sb, struct inode *parent,
 	}
 
 	return -1;
+#ifndef __clang__
+#pragma GCC diagnostic pop
+#endif
 }
 
 static int find_group_other(struct super_block *sb, struct inode *parent,
diff --git a/kernel/bpf/verifier.c b/kernel/bpf/verifier.c
index cc58f38ba473..9b9a0ee2a4d5 100644
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@ -4733,6 +4733,12 @@ static int do_check(struct bpf_verifier_env *env)
 	int insn_processed = 0;
 	bool do_print_state = false;
 
+/* Variable "opcode" is not initialized but not used when the goto process_bpf_exit branch is taken */
+#ifndef __clang__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wjump-misses-init"
+#endif
+
 	state = kzalloc(sizeof(struct bpf_verifier_state), GFP_KERNEL);
 	if (!state)
 		return -ENOMEM;
@@ -5057,6 +5063,9 @@ static int do_check(struct bpf_verifier_env *env)
 	verbose(env, "\n");
 	env->prog->aux->stack_depth = env->subprog_info[0].stack_depth;
 	return 0;
+#ifndef __clang__
+#pragma GCC diagnostic pop
+#endif
 }
 
 static int check_map_prealloc(struct bpf_map *map)
diff --git a/lib/rhashtable.c b/lib/rhashtable.c
index a10521db8d5e..762a84f38bb6 100644
--- a/lib/rhashtable.c
+++ b/lib/rhashtable.c
@@ -818,6 +818,7 @@ static void *__rhashtable_walk_find_next(struct rhashtable_iter *iter)
 		}
 
 next:
+#pragma GCC diagnostic pop
 		if (!rht_is_a_nulls(p)) {
 			iter->skip++;
 			iter->p = p;
diff --git a/mm/mmap.c b/mm/mmap.c
index 5f2b2b184c60..4ad4c8793722 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -701,6 +701,11 @@ int __vma_adjust(struct vm_area_struct *vma, unsigned long start,
 	long adjust_next = 0;
 	int remove_next = 0;
 
+/* Variable "exporter" is not initialized but not used when the goto again branch is taken */
+#ifndef __clang__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wjump-misses-init"
+#endif
 	if (next && !insert) {
 		struct vm_area_struct *exporter = NULL, *importer = NULL;
 
@@ -974,6 +979,9 @@ int __vma_adjust(struct vm_area_struct *vma, unsigned long start,
 	validate_mm(mm);
 
 	return 0;
+#ifndef __clang__
+#pragma GCC diagnostic pop
+#endif
 }
 
 /*
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index c996c09d095f..2da6c2eeb554 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -1770,6 +1770,11 @@ int ___pskb_trim(struct sk_buff *skb, unsigned int len)
 	    unlikely((err = pskb_expand_head(skb, 0, 0, GFP_ATOMIC))))
 		return err;
 
+/* Variable "end" is not initialized but not used after the goto drop_pages branch is taken */
+#ifndef __clang__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wjump-misses-init"
+#endif
 	i = 0;
 	if (offset >= len)
 		goto drop_pages;
@@ -1786,6 +1791,9 @@ int ___pskb_trim(struct sk_buff *skb, unsigned int len)
 
 drop_pages:
 		skb_shinfo(skb)->nr_frags = i;
+#ifndef __clang__
+#pragma GCC diagnostic pop
+#endif
 
 		for (; i < nfrags; i++)
 			skb_frag_unref(skb, i);
diff --git a/net/ipv4/fib_trie.c b/net/ipv4/fib_trie.c
index 791523b067ce..3e23190d2a5d 100644
--- a/net/ipv4/fib_trie.c
+++ b/net/ipv4/fib_trie.c
@@ -1341,6 +1341,10 @@ int fib_table_lookup(struct fib_table *tb, const struct flowi4 *flp,
 	this_cpu_inc(stats->gets);
 #endif
 
+#ifndef __clang__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wjump-misses-init"
+#endif
 	/* Step 1: Travel to the longest prefix match in the trie */
 	for (;;) {
 		index = get_cindex(key, n);
@@ -1509,6 +1513,9 @@ int fib_table_lookup(struct fib_table *tb, const struct flowi4 *flp,
 	this_cpu_inc(stats->semantic_match_miss);
 #endif
 	goto backtrace;
+#ifndef __clang__
+#pragma GCC diagnostic pop
+#endif
 }
 EXPORT_SYMBOL_GPL(fib_table_lookup);
 
diff --git a/net/sched/cls_u32.c b/net/sched/cls_u32.c
index d5d2a6dc3921..f589ea7a87b9 100644
--- a/net/sched/cls_u32.c
+++ b/net/sched/cls_u32.c
@@ -113,6 +113,11 @@ static inline unsigned int u32_hash_fold(__be32 key,
 static int u32_classify(struct sk_buff *skb, const struct tcf_proto *tp,
 			struct tcf_result *res)
 {
+/* Variable "key" is not initialized but not used when the goto check_terminal is taken */
+#ifndef __clang__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wjump-misses-init"
+#endif
 	struct {
 		struct tc_u_knode *knode;
 		unsigned int	  off;
@@ -261,6 +266,9 @@ static int u32_classify(struct sk_buff *skb, const struct tcf_proto *tp,
 deadloop:
 	net_warn_ratelimited("cls_u32: dead loop\n");
 	return -1;
+#ifndef __clang__
+#pragma GCC diagnostic pop
+#endif
 }
 
 static struct tc_u_hnode *u32_lookup_ht(struct tc_u_common *tp_c, u32 handle)
-- 
