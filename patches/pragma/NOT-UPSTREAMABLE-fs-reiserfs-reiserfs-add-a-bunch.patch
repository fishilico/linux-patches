From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Mon, 2 Mar 2015 21:25:59 +0800
Subject: [PATCH] {PRAGMA} {NOT UPSTREAMABLE} fs/reiserfs/reiserfs: add a bunch
 of printf attributes

---
 fs/reiserfs/dir.c             |   4 ++
 fs/reiserfs/do_balan.c        |  33 ++++++++++
 fs/reiserfs/fix_node.c        |  44 +++++++++++++
 fs/reiserfs/ibalance.c        |   8 +++
 fs/reiserfs/inode.c           |  32 ++++++++++
 fs/reiserfs/item_ops.c        |  16 +++++
 fs/reiserfs/lbalance.c        |  44 +++++++++++++
 fs/reiserfs/namei.c           |   8 +++
 fs/reiserfs/prints.c          |  48 +++++++++++++-
 fs/reiserfs/reiserfs.h        |  18 +++---
 fs/reiserfs/stree.c           | 116 ++++++++++++++++++++++++++++++++++
 fs/reiserfs/super.c           |  28 ++++++++
 fs/reiserfs/tail_conversion.c |  16 +++++
 fs/reiserfs/xattr.c           |   8 +++
 14 files changed, 413 insertions(+), 10 deletions(-)

diff --git a/fs/reiserfs/dir.c b/fs/reiserfs/dir.c
index 79ee2b436685..5d0514d0070b 100644
--- a/fs/reiserfs/dir.c
+++ b/fs/reiserfs/dir.c
@@ -112,9 +112,13 @@ int reiserfs_readdir_inode(struct inode *inode, struct dir_context *ctx)
 		store_ih(&tmp_ih, ih);
 
 		/* we must have found item, that is item of this directory, */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		RFALSE(COMP_SHORT_KEYS(&ih->ih_key, &pos_key),
 		       "vs-9000: found item %h does not match to dir we readdir %K",
 		       ih, &pos_key);
+#pragma GCC diagnostic pop
 		RFALSE(item_num > B_NR_ITEMS(bh) - 1,
 		       "vs-9005 item_num == %d, item amount == %d",
 		       item_num, B_NR_ITEMS(bh));
diff --git a/fs/reiserfs/do_balan.c b/fs/reiserfs/do_balan.c
index 5129efc6f2e6..cd4eccf493f6 100644
--- a/fs/reiserfs/do_balan.c
+++ b/fs/reiserfs/do_balan.c
@@ -83,9 +83,13 @@ static void balance_leaf_when_delete_del(struct tree_balance *tb)
 	struct item_head *ih = item_head(tbS0, item_pos);
 #endif
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE(ih_item_len(ih) + IH_SIZE != -tb->insert_size[0],
 	       "vs-12013: mode Delete, insert size %d, ih to be deleted %h",
 	       -tb->insert_size[0], ih);
+#pragma GCC diagnostic pop
 
 	buffer_info_init_tbS0(tb, &bi);
 	leaf_delete_items(&bi, 0, item_pos, 1, -1);
@@ -242,8 +246,12 @@ static int balance_leaf_when_delete(struct tree_balance *tb, int flag)
 	struct buffer_info bi;
 	int n;
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE(tb->FR[0] && B_LEVEL(tb->FR[0]) != DISK_LEAF_NODE_LEVEL + 1,
 	       "vs- 12000: level: wrong FR %z", tb->FR[0]);
+#pragma GCC diagnostic pop
 	RFALSE(tb->blknum[0] > 1,
 	       "PAP-12005: tb->blknum == %d, can not be > 1", tb->blknum[0]);
 	RFALSE(!tb->blknum[0] && !PATH_H_PPARENT(tb->tb_path, 0),
@@ -1249,11 +1257,15 @@ static void balance_leaf_new_nodes(struct tree_balance *tb,
 		memcpy(insert_key + i, leaf_key(tb->S_new[i], 0), KEY_SIZE);
 		insert_ptr[i] = tb->S_new[i];
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		RFALSE(!buffer_journaled(tb->S_new[i])
 		       || buffer_journal_dirty(tb->S_new[i])
 		       || buffer_dirty(tb->S_new[i]),
 		       "PAP-12247: S_new[%d] : (%b)",
 		       i, tb->S_new[i]);
+#pragma GCC diagnostic pop
 	}
 }
 
@@ -1556,9 +1568,13 @@ void replace_key(struct tree_balance *tb, struct buffer_head *dest, int n_dest,
 	RFALSE(dest == NULL || src == NULL,
 	       "vs-12305: source or destination buffer is 0 (src=%p, dest=%p)",
 	       src, dest);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE(!B_IS_KEYS_LEVEL(dest),
 	       "vs-12310: invalid level (%z) for destination buffer. dest must be leaf",
 	       dest);
+#pragma GCC diagnostic pop
 	RFALSE(n_dest < 0 || n_src < 0,
 	       "vs-12315: src(%d) or dest(%d) key number < 0", n_src, n_dest);
 	RFALSE(n_dest >= B_NR_ITEMS(dest) || n_src >= B_NR_ITEMS(src),
@@ -1618,17 +1634,25 @@ static void check_internal_node(struct super_block *s, struct buffer_head *bh,
 	if (!bh || !B_IS_IN_TREE(bh))
 		return;
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE(!buffer_dirty(bh) &&
 	       !(buffer_journaled(bh) || buffer_journal_dirty(bh)),
 	       "PAP-12337: buffer (%b) must be dirty", bh);
+#pragma GCC diagnostic pop
 	dc = B_N_CHILD(bh, 0);
 
 	for (i = 0; i <= B_NR_ITEMS(bh); i++, dc++) {
 		if (!is_reusable(s, dc_block_number(dc), 1)) {
 			print_cur_tb(mes);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_panic(s, "PAP-12338",
 				       "invalid child pointer %y in %b",
 				       dc, bh);
+#pragma GCC diagnostic pop
 		}
 	}
 }
@@ -1638,7 +1662,11 @@ static int locked_or_not_in_tree(struct tree_balance *tb,
 {
 	if ((!buffer_journal_prepared(bh) && buffer_locked(bh)) ||
 	    !B_IS_IN_TREE(bh)) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_warning(tb->tb_sb, "vs-12339", "%s (%b)", which, bh);
+#pragma GCC diagnostic pop
 		return 1;
 	}
 	return 0;
@@ -1712,6 +1740,10 @@ static void check_after_balance_leaf(struct tree_balance *tb)
 					       PATH_H_POSITION(tb->tb_path,
 							       1))));
 		print_cur_tb("12223");
+
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_warning(tb->tb_sb, "reiserfs-12363",
 				 "B_FREE_SPACE (PATH_H_PBUFFER(tb->tb_path,0)) = %d; "
 				 "MAX_CHILD_SIZE (%d) - dc_size( %y, %d ) [%d] = %d",
@@ -1723,6 +1755,7 @@ static void check_after_balance_leaf(struct tree_balance *tb)
 					 (PATH_H_PBUFFER(tb->tb_path, 1),
 					  PATH_H_POSITION(tb->tb_path, 1))),
 				 right);
+#pragma GCC diagnostic pop
 		reiserfs_panic(tb->tb_sb, "PAP-12365", "S is incorrect");
 	}
 }
diff --git a/fs/reiserfs/fix_node.c b/fs/reiserfs/fix_node.c
index fefe87e1c099..0eecbbb4b553 100644
--- a/fs/reiserfs/fix_node.c
+++ b/fs/reiserfs/fix_node.c
@@ -175,11 +175,15 @@ static void create_virtual_node(struct tree_balance *tb, int h)
 				 * contains more than 1 entry
 				 */
 				print_block(Sh, 0, -1, -1);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 				reiserfs_panic(tb->tb_sb, "vs-8045",
 					       "rdkey %k, affected item==%d "
 					       "(mode==%c) Must be %c",
 					       key, vn->vn_affected_item_num,
 					       vn->vn_mode, M_DELETE);
+#pragma GCC diagnostic pop
 			}
 		}
 #endif
@@ -888,11 +892,15 @@ static int get_empty_nodes(struct tree_balance *tb, int h)
 		       "PAP-8135: reiserfs_new_blocknrs failed when got new blocks");
 
 		new_bh = sb_getblk(sb, *blocknr);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		RFALSE(buffer_dirty(new_bh) ||
 		       buffer_journaled(new_bh) ||
 		       buffer_journal_dirty(new_bh),
 		       "PAP-8140: journaled or dirty buffer %b for the new block",
 		       new_bh);
+#pragma GCC diagnostic pop
 
 		/* Put empty buffers into the array. */
 		RFALSE(tb->FEB[tb->cur_blknum],
@@ -970,6 +978,9 @@ static int is_left_neighbor_in_cache(struct tree_balance *tb, int h)
 	/* Calculate father of the node to be balanced. */
 	father = PATH_H_PBUFFER(tb->tb_path, h + 1);
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE(!father ||
 	       !B_IS_IN_TREE(father) ||
 	       !B_IS_IN_TREE(tb->FL[h]) ||
@@ -977,6 +988,7 @@ static int is_left_neighbor_in_cache(struct tree_balance *tb, int h)
 	       !buffer_uptodate(tb->FL[h]),
 	       "vs-8165: F[h] (%b) or FL[h] (%b) is invalid",
 	       father, tb->FL[h]);
+#pragma GCC diagnostic pop
 
 	/*
 	 * Get position of the pointer to the left neighbor
@@ -990,9 +1002,13 @@ static int is_left_neighbor_in_cache(struct tree_balance *tb, int h)
 	/* Look for the left neighbor in the cache. */
 	if ((left = sb_find_get_block(sb, left_neighbor_blocknr))) {
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		RFALSE(buffer_uptodate(left) && !B_IS_IN_TREE(left),
 		       "vs-8170: left neighbor (%b %z) is not in the tree",
 		       left, left);
+#pragma GCC diagnostic pop
 		put_bh(left);
 		return 1;
 	}
@@ -1098,9 +1114,13 @@ static int get_far_parent(struct tree_balance *tb,
 		return REPEAT_SEARCH;
 	}
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE(B_LEVEL(*pcom_father) <= DISK_LEAF_NODE_LEVEL,
 	       "PAP-8185: (%b %z) level too small",
 	       *pcom_father, *pcom_father);
+#pragma GCC diagnostic pop
 
 	/* Check whether the common parent is locked. */
 
@@ -1149,10 +1169,14 @@ static int get_far_parent(struct tree_balance *tb,
 
 	*pfather = PATH_PLAST_BUFFER(&s_path_to_neighbor_father);
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE(B_LEVEL(*pfather) != h + 1,
 	       "PAP-8190: (%b %z) level too small", *pfather, *pfather);
 	RFALSE(s_path_to_neighbor_father.path_length <
 	       FIRST_PATH_ELEMENT_OFFSET, "PAP-8192: path length is too small");
+#pragma GCC diagnostic pop
 
 	s_path_to_neighbor_father.path_length--;
 	pathrelse(&s_path_to_neighbor_father);
@@ -1224,9 +1248,13 @@ static int get_parents(struct tree_balance *tb, int h)
 	brelse(tb->CFL[h]);
 	tb->CFL[h] = curcf;	/* New initialization of CFL[h]. */
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE((curf && !B_IS_IN_TREE(curf)) ||
 	       (curcf && !B_IS_IN_TREE(curcf)),
 	       "PAP-8195: FL (%b) or CFL (%b) is invalid", curf, curcf);
+#pragma GCC diagnostic pop
 
 	/* Get parent FR[h] of R[h]. */
 
@@ -1259,9 +1287,13 @@ static int get_parents(struct tree_balance *tb, int h)
 	/* New initialization of CFR[path_offset]. */
 	tb->CFR[h] = curcf;
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE((curf && !B_IS_IN_TREE(curf)) ||
 	       (curcf && !B_IS_IN_TREE(curcf)),
 	       "PAP-8205: FR (%b) or CFR (%b) is invalid", curf, curcf);
+#pragma GCC diagnostic pop
 
 	return CARRY_ON;
 }
@@ -2314,6 +2346,9 @@ static void tb_buffer_sanity_check(struct super_block *sb,
 				   struct buffer_head *bh,
 				   const char *descr, int level)
 {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	if (bh) {
 		if (atomic_read(&(bh->b_count)) <= 0)
 
@@ -2346,6 +2381,7 @@ static void tb_buffer_sanity_check(struct super_block *sb,
 				       "number too high %s[%d] (%b)",
 				       descr, level, bh);
 	}
+#pragma GCC diagnostic pop
 }
 #else
 static void tb_buffer_sanity_check(struct super_block *sb,
@@ -2488,10 +2524,14 @@ static int wait_tb_buffers_until_unlocked(struct tree_balance *tb)
 #ifdef CONFIG_REISERFS_CHECK
 			repeat_counter++;
 			if ((repeat_counter % 10000) == 0) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 				reiserfs_warning(tb->tb_sb, "reiserfs-8200",
 						 "too many iterations waiting "
 						 "for buffer to unlock "
 						 "(%b)", locked);
+#pragma GCC diagnostic pop
 
 				/* Don't loop forever.  Try to recover from possible error. */
 
@@ -2590,10 +2630,14 @@ int fix_nodes(int op_mode, struct tree_balance *tb,
 	}
 
 	if (!buffer_uptodate(tbS0) || !B_IS_IN_TREE(tbS0))
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_panic(tb->tb_sb, "PAP-8320", "S[0] (%b %z) is "
 			       "not uptodate at the beginning of fix_nodes "
 			       "or not in tree (mode %c)",
 			       tbS0, tbS0, op_mode);
+#pragma GCC diagnostic pop
 
 	/* Check parameters. */
 	switch (op_mode) {
diff --git a/fs/reiserfs/ibalance.c b/fs/reiserfs/ibalance.c
index 8d902847f82e..60be0f4b93dd 100644
--- a/fs/reiserfs/ibalance.c
+++ b/fs/reiserfs/ibalance.c
@@ -234,10 +234,14 @@ static void internal_delete_pointers_items(struct buffer_info *cur_bi,
 		return;
 	}
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE(first_i + del_num > B_NR_ITEMS(cur),
 	       "first_i = %d del_num = %d "
 	       "no so many keys (%d) in the node (%b)(%z)",
 	       first_i, del_num, first_i + del_num, cur, cur);
+#pragma GCC diagnostic pop
 
 	/* deleting */
 	dc = B_N_CHILD(cur, first_p);
@@ -1133,9 +1137,13 @@ int balance_internal(struct tree_balance *tb,
 		/* new_insert_ptr = node_pointer to S_new */
 		new_insert_ptr = S_new;
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		RFALSE(!buffer_journaled(S_new) || buffer_journal_dirty(S_new)
 		       || buffer_dirty(S_new), "cm-00001: bad S_new (%b)",
 		       S_new);
+#pragma GCC diagnostic pop
 
 		/* S_new is released in unfix_nodes */
 	}
diff --git a/fs/reiserfs/inode.c b/fs/reiserfs/inode.c
index 03b95ac9f894..8f06305d5612 100644
--- a/fs/reiserfs/inode.c
+++ b/fs/reiserfs/inode.c
@@ -1128,8 +1128,12 @@ int reiserfs_get_block(struct inode *inode, sector_t block,
 			goto failure;
 		}
 		if (retval == POSITION_FOUND) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(inode->i_sb, "vs-825",
 					 "%K should not be found", &key);
+#pragma GCC diagnostic pop
 			retval = -EEXIST;
 			if (allocated_block_nr)
 				reiserfs_free_block(th, inode,
@@ -1429,8 +1433,12 @@ static void update_stat_data(struct treepath *path, struct inode *inode,
 	ih = tp_item_head(path);
 
 	if (!is_statdata_le_ih(ih))
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_panic(inode->i_sb, "vs-13065", "key %k, found item %h",
 			       INODE_PKEY(inode), ih);
+#pragma GCC diagnostic pop
 
 	/* path points to old stat data */
 	if (stat_data_v1(ih)) {
@@ -1462,9 +1470,13 @@ void reiserfs_update_sd_size(struct reiserfs_transaction_handle *th,
 		/* look for the object's stat data */
 		retval = search_item(inode->i_sb, &key, &path);
 		if (retval == IO_ERROR) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_error(inode->i_sb, "vs-13050",
 				       "i/o failure occurred trying to "
 				       "update %K stat data", &key);
+#pragma GCC diagnostic pop
 			return;
 		}
 		if (retval == ITEM_NOT_FOUND) {
@@ -1474,11 +1486,15 @@ void reiserfs_update_sd_size(struct reiserfs_transaction_handle *th,
 				/*reiserfs_warning (inode->i_sb, "vs-13050: reiserfs_update_sd: i_nlink == 0, stat data not found"); */
 				return;
 			}
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(inode->i_sb, "vs-13060",
 					 "stat data of object %k (nlink == %d) "
 					 "not found (pos %d)",
 					 INODE_PKEY(inode), inode->i_nlink,
 					 pos);
+#pragma GCC diagnostic pop
 			reiserfs_check_path(&path);
 			return;
 		}
@@ -1556,9 +1572,13 @@ void reiserfs_read_locked_inode(struct inode *inode,
 	/* look for the object's stat data */
 	retval = search_item(inode->i_sb, &key, &path_to_sd);
 	if (retval == IO_ERROR) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_error(inode->i_sb, "vs-13070",
 			       "i/o failure occurred trying to find "
 			       "stat data of %K", &key);
+#pragma GCC diagnostic pop
 		reiserfs_make_bad_inode(inode);
 		return;
 	}
@@ -1594,10 +1614,14 @@ void reiserfs_read_locked_inode(struct inode *inode,
 	 */
 	if ((inode->i_nlink == 0) &&
 	    !REISERFS_SB(inode->i_sb)->s_is_unlinked_ok) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_warning(inode->i_sb, "vs-13075",
 				 "dead inode read from disk %K. "
 				 "This is likely to be race with knfsd. Ignore",
 				 &key);
+#pragma GCC diagnostic pop
 		reiserfs_make_bad_inode(inode);
 	}
 
@@ -1844,9 +1868,13 @@ static int reiserfs_new_directory(struct reiserfs_transaction_handle *th,
 	}
 	if (retval == ITEM_FOUND) {
 		pathrelse(path);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_warning(sb, "vs-13070",
 				 "object with this key exists (%k)",
 				 &(ih->ih_key));
+#pragma GCC diagnostic pop
 		return -EEXIST;
 	}
 
@@ -1887,9 +1915,13 @@ static int reiserfs_new_symlink(struct reiserfs_transaction_handle *th,
 	}
 	if (retval == ITEM_FOUND) {
 		pathrelse(path);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_warning(sb, "vs-13080",
 				 "object with this key exists (%k)",
 				 &(ih->ih_key));
+#pragma GCC diagnostic pop
 		return -EEXIST;
 	}
 
diff --git a/fs/reiserfs/item_ops.c b/fs/reiserfs/item_ops.c
index 3a5a752d96c7..37b39de36d69 100644
--- a/fs/reiserfs/item_ops.c
+++ b/fs/reiserfs/item_ops.c
@@ -90,9 +90,13 @@ static int sd_unit_num(struct virtual_item *vi)
 
 static void sd_print_vi(struct virtual_item *vi)
 {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	reiserfs_warning(NULL, "reiserfs-16100",
 			 "STATDATA, index %d, type 0x%x, %h",
 			 vi->vi_index, vi->vi_type, vi->vi_ih);
+#pragma GCC diagnostic pop
 }
 
 static struct item_operations stat_data_ops = {
@@ -181,9 +185,13 @@ static int direct_unit_num(struct virtual_item *vi)
 
 static void direct_print_vi(struct virtual_item *vi)
 {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	reiserfs_warning(NULL, "reiserfs-16101",
 			 "DIRECT, index %d, type 0x%x, %h",
 			 vi->vi_index, vi->vi_type, vi->vi_ih);
+#pragma GCC diagnostic pop
 }
 
 static struct item_operations direct_ops = {
@@ -325,9 +333,13 @@ static int indirect_unit_num(struct virtual_item *vi)
 
 static void indirect_print_vi(struct virtual_item *vi)
 {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	reiserfs_warning(NULL, "reiserfs-16103",
 			 "INDIRECT, index %d, type 0x%x, %h",
 			 vi->vi_index, vi->vi_type, vi->vi_ih);
+#pragma GCC diagnostic pop
 }
 
 static struct item_operations indirect_ops = {
@@ -608,9 +620,13 @@ static void direntry_print_vi(struct virtual_item *vi)
 	int i;
 	struct direntry_uarea *dir_u = vi->vi_uarea;
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	reiserfs_warning(NULL, "reiserfs-16104",
 			 "DIRENTRY, index %d, type 0x%x, %h, flags 0x%x",
 			 vi->vi_index, vi->vi_type, vi->vi_ih, dir_u->flags);
+#pragma GCC diagnostic pop
 	printk("%d entries: ", dir_u->entry_count);
 	for (i = 0; i < dir_u->entry_count; i++)
 		printk("%d ", dir_u->entry_sizes[i]);
diff --git a/fs/reiserfs/lbalance.c b/fs/reiserfs/lbalance.c
index d50fffe51c9e..000e6ecd18ba 100644
--- a/fs/reiserfs/lbalance.c
+++ b/fs/reiserfs/lbalance.c
@@ -184,11 +184,15 @@ static int leaf_copy_boundary_item(struct buffer_info *dest_bi,
 			if (bytes_or_entries == ih_item_len(ih)
 			    && is_indirect_le_ih(ih))
 				if (get_ih_free_space(ih))
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 					reiserfs_panic(sb_from_bi(dest_bi),
 						       "vs-10020",
 						       "last unformatted node "
 						       "must be filled "
 						       "entirely (%h)", ih);
+#pragma GCC diagnostic pop
 		}
 #endif
 
@@ -201,9 +205,13 @@ static int leaf_copy_boundary_item(struct buffer_info *dest_bi,
 				     bytes_or_entries, ih_item_body(src, ih), 0);
 
 		if (is_indirect_le_ih(dih)) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			RFALSE(get_ih_free_space(dih),
 			       "vs-10030: merge to left: last unformatted node of non-last indirect item %h must have zerto free space",
 			       ih);
+#pragma GCC diagnostic pop
 			if (bytes_or_entries == ih_item_len(ih))
 				set_ih_free_space(dih, get_ih_free_space(ih));
 		}
@@ -246,17 +254,25 @@ static int leaf_copy_boundary_item(struct buffer_info *dest_bi,
 	 * change first item key of the DEST; don't create new item header
 	 */
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE(is_indirect_le_ih(ih) && get_ih_free_space(ih),
 	       "vs-10040: merge to right: last unformatted node of non-last indirect item must be filled entirely (%h)",
 	       ih);
+#pragma GCC diagnostic pop
 
 	if (bytes_or_entries == -1) {
 		/* bytes_or_entries = length of last item body of SOURCE */
 		bytes_or_entries = ih_item_len(ih);
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		RFALSE(le_ih_k_offset(dih) !=
 		       le_ih_k_offset(ih) + op_bytes_number(ih, src->b_size),
 		       "vs-10050: items %h and %h do not match", ih, dih);
+#pragma GCC diagnostic pop
 
 		/* change first item key of the DEST */
 		set_le_ih_k_offset(dih, le_ih_k_offset(ih));
@@ -273,19 +289,27 @@ static int leaf_copy_boundary_item(struct buffer_info *dest_bi,
 
 		/* change first item key of the DEST */
 		if (is_direct_le_ih(dih)) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			RFALSE(le_ih_k_offset(dih) <=
 			       (unsigned long)bytes_or_entries,
 			       "vs-10070: dih %h, bytes_or_entries(%d)", dih,
 			       bytes_or_entries);
+#pragma GCC diagnostic pop
 			set_le_ih_k_offset(dih,
 					   le_ih_k_offset(dih) -
 					   bytes_or_entries);
 		} else {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			RFALSE(le_ih_k_offset(dih) <=
 			       (bytes_or_entries / UNFM_P_SIZE) * dest->b_size,
 			       "vs-10080: dih %h, bytes_or_entries(%d)",
 			       dih,
 			       (bytes_or_entries / UNFM_P_SIZE) * dest->b_size);
+#pragma GCC diagnostic pop
 			set_le_ih_k_offset(dih,
 					   le_ih_k_offset(dih) -
 					   ((bytes_or_entries / UNFM_P_SIZE) *
@@ -449,8 +473,12 @@ static void leaf_item_bottle(struct buffer_info *dest_bi,
 				set_ih_free_space(&n_ih, 0);
 			}
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			RFALSE(op_is_left_mergeable(&ih->ih_key, src->b_size),
 			       "vs-10190: bad mergeability of item %h", ih);
+#pragma GCC diagnostic pop
 			n_ih.ih_version = ih->ih_version;	/* JDM Endian safe, both le */
 			leaf_insert_into_buf(dest_bi, B_NR_ITEMS(dest), &n_ih,
 					     item_body(src, item_num), 0);
@@ -916,9 +944,13 @@ void leaf_insert_into_buf(struct buffer_info *bi, int before,
 	free_space = blkh_free_space(blkh);
 
 	/* check free space */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE(free_space < ih_item_len(inserted_item_ih) + IH_SIZE,
 	       "vs-10170: not enough free space in block %z, new item %h",
 	       bh, inserted_item_ih);
+#pragma GCC diagnostic pop
 	RFALSE(zeros_number > ih_item_len(inserted_item_ih),
 	       "vs-10172: zero number == %d, item length == %d",
 	       zeros_number, ih_item_len(inserted_item_ih));
@@ -1193,9 +1225,13 @@ void leaf_cut_from_buffer(struct buffer_info *bi, int cut_item_num,
 						   le_ih_k_offset(ih) +
 						   (cut_size / UNFM_P_SIZE) *
 						   bh->b_size);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 				RFALSE(ih_item_len(ih) == cut_size
 				       && get_ih_free_space(ih),
 				       "10205: invalid ih_free_space (%h)", ih);
+#pragma GCC diagnostic pop
 			}
 		}
 	}
@@ -1408,17 +1444,25 @@ void leaf_paste_entries(struct buffer_info *bi,
 			prev = (i != 0) ? deh_location(&deh[i - 1]) : 0;
 
 			if (prev && prev <= deh_location(&deh[i]))
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 				reiserfs_error(sb_from_bi(bi), "vs-10240",
 					       "directory item (%h) "
 					       "corrupted (prev %a, "
 					       "cur(%d) %a)",
 					       ih, deh + i - 1, i, deh + i);
+#pragma GCC diagnostic pop
 			if (next && next >= deh_location(&deh[i]))
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 				reiserfs_error(sb_from_bi(bi), "vs-10250",
 					       "directory item (%h) "
 					       "corrupted (cur(%d) %a, "
 					       "next %a)",
 					       ih, i, deh + i, deh + i + 1);
+#pragma GCC diagnostic pop
 		}
 	}
 #endif
diff --git a/fs/reiserfs/namei.c b/fs/reiserfs/namei.c
index 3d7a35d6a18b..b291e8b5a7e3 100644
--- a/fs/reiserfs/namei.c
+++ b/fs/reiserfs/namei.c
@@ -152,9 +152,13 @@ int search_by_entry_key(struct super_block *sb, const struct cpu_key *key,
 	if (!is_direntry_le_ih(de->de_ih) ||
 	    COMP_SHORT_KEYS(&de->de_ih->ih_key, key)) {
 		print_block(de->de_bh, 0, -1, -1);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_panic(sb, "vs-7005", "found item %h is not directory "
 			       "item or does not belong to the same directory "
 			       "as key %K", de->de_ih, key);
+#pragma GCC diagnostic pop
 	}
 #endif				/* CONFIG_REISERFS_CHECK */
 
@@ -551,9 +555,13 @@ static int reiserfs_add_entry(struct reiserfs_transaction_handle *th,
 	if (gen_number != 0) {
 		if (search_by_entry_key(dir->i_sb, &entry_key, &path, &de) !=
 		    NAME_NOT_FOUND) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(dir->i_sb, "vs-7032",
 					 "entry with this key (%K) already "
 					 "exists", &entry_key);
+#pragma GCC diagnostic pop
 
 			if (buffer != small_buf)
 				kfree(buffer);
diff --git a/fs/reiserfs/prints.c b/fs/reiserfs/prints.c
index 30319dc33c18..1c03a919e752 100644
--- a/fs/reiserfs/prints.c
+++ b/fs/reiserfs/prints.c
@@ -200,7 +200,7 @@ static char *is_there_reiserfs_struct(char *fmt, int *what)
  *         key->k_offset, key->k_uniqueness);
  */
 static DEFINE_SPINLOCK(error_lock);
-static void prepare_error_buf(const char *fmt, va_list args)
+static __printf(1, 0) void prepare_error_buf(const char *fmt, va_list args)
 {
 	char *fmt1 = fmt_buf;
 	char *k;
@@ -307,7 +307,7 @@ void reiserfs_info(struct super_block *sb, const char *fmt, ...)
 }
 
 /* No newline.. reiserfs_printk calls can be followed by printk's */
-static void reiserfs_printk(const char *fmt, ...)
+static __printf(1, 2) void reiserfs_printk(const char *fmt, ...)
 {
 	do_reiserfs_warning(fmt);
 	printk(error_buf);
@@ -459,14 +459,26 @@ static int print_internal(struct buffer_head *bh, int first, int last)
 		to = last < B_NR_ITEMS(bh) ? last : B_NR_ITEMS(bh);
 	}
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	reiserfs_printk("INTERNAL NODE (%ld) contains %z\n", bh->b_blocknr, bh);
+#pragma GCC diagnostic pop
 
 	dc = B_N_CHILD(bh, from);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	reiserfs_printk("PTR %d: %y ", from, dc);
+#pragma GCC diagnostic pop
 
 	for (i = from, key = internal_key(bh, from), dc++; i < to;
 	     i++, key++, dc++) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_printk("KEY %d: %k PTR %d: %y ", i, key, i + 1, dc);
+#pragma GCC diagnostic pop
 		if (i && i % 4 == 0)
 			printk("\n");
 	}
@@ -493,11 +505,19 @@ static int print_leaf(struct buffer_head *bh, int print_mode, int first,
 
 	printk
 	    ("\n===================================================================\n");
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	reiserfs_printk("LEAF NODE (%ld) contains %z\n", bh->b_blocknr, bh);
+#pragma GCC diagnostic pop
 
 	if (!(print_mode & PRINT_LEAF_ITEMS)) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_printk("FIRST ITEM_KEY: %k, LAST ITEM KEY: %k\n",
 				&(ih->ih_key), &((ih + nr - 1)->ih_key));
+#pragma GCC diagnostic pop
 		return 0;
 	}
 
@@ -519,7 +539,11 @@ static int print_leaf(struct buffer_head *bh, int print_mode, int first,
 	for (i = from; i < to; i++, ih++) {
 		printk
 		    ("-------------------------------------------------------------------------------\n");
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_printk("|%2d| %h |\n", i, ih);
+#pragma GCC diagnostic pop
 		if (print_mode & PRINT_LEAF_ITEMS)
 			op_print_item(ih, ih_item_body(bh, ih));
 	}
@@ -736,26 +760,46 @@ static void check_leaf_block_head(struct buffer_head *bh)
 	blkh = B_BLK_HEAD(bh);
 	nr = blkh_nr_item(blkh);
 	if (nr > (bh->b_size - BLKH_SIZE) / IH_SIZE)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_panic(NULL, "vs-6010", "invalid item number %z",
 			       bh);
+#pragma GCC diagnostic pop
 	if (blkh_free_space(blkh) > bh->b_size - BLKH_SIZE - IH_SIZE * nr)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_panic(NULL, "vs-6020", "invalid free space %z",
 			       bh);
+#pragma GCC diagnostic pop
 
 }
 
 static void check_internal_block_head(struct buffer_head *bh)
 {
 	if (!(B_LEVEL(bh) > DISK_LEAF_NODE_LEVEL && B_LEVEL(bh) <= MAX_HEIGHT))
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_panic(NULL, "vs-6025", "invalid level %z", bh);
+#pragma GCC diagnostic pop
 
 	if (B_NR_ITEMS(bh) > (bh->b_size - BLKH_SIZE) / IH_SIZE)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_panic(NULL, "vs-6030", "invalid item number %z", bh);
+#pragma GCC diagnostic pop
 
 	if (B_FREE_SPACE(bh) !=
 	    bh->b_size - BLKH_SIZE - KEY_SIZE * B_NR_ITEMS(bh) -
 	    DC_SIZE * (B_NR_ITEMS(bh) + 1))
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_panic(NULL, "vs-6040", "invalid free space %z", bh);
+#pragma GCC diagnostic pop
 
 }
 
diff --git a/fs/reiserfs/reiserfs.h b/fs/reiserfs/reiserfs.h
index 3aa928ec527a..fafa4345441e 100644
--- a/fs/reiserfs/reiserfs.h
+++ b/fs/reiserfs/reiserfs.h
@@ -897,8 +897,8 @@ struct fid;
  */
 #define REISERFS_DEBUG_CODE 5	/* extra messages to help find/debug errors */
 
-void __reiserfs_warning(struct super_block *s, const char *id,
-			 const char *func, const char *fmt, ...);
+__printf(4, 5) void __reiserfs_warning(struct super_block *s, const char *id,
+				       const char *func, const char *fmt, ...);
 #define reiserfs_warning(s, id, fmt, args...) \
 	 __reiserfs_warning(s, id, __func__, fmt, ##args)
 /* assertions handling */
@@ -2944,6 +2944,7 @@ int journal_begin(struct reiserfs_transaction_handle *,
 int journal_join_abort(struct reiserfs_transaction_handle *,
 		       struct super_block *sb);
 void reiserfs_abort_journal(struct super_block *sb, int errno);
+__printf(3, 4)
 void reiserfs_abort(struct super_block *sb, int errno, const char *fmt, ...);
 int reiserfs_allocate_list_bitmaps(struct super_block *s,
 				   struct reiserfs_list_bitmap *, unsigned int);
@@ -3185,17 +3186,18 @@ int fix_nodes(int n_op_mode, struct tree_balance *tb,
 void unfix_nodes(struct tree_balance *);
 
 /* prints.c */
-void __reiserfs_panic(struct super_block *s, const char *id,
-		      const char *function, const char *fmt, ...)
+__printf(4, 5) void __reiserfs_panic(struct super_block *s, const char *id,
+				     const char *function, const char *fmt, ...)
     __attribute__ ((noreturn));
 #define reiserfs_panic(s, id, fmt, args...) \
 	__reiserfs_panic(s, id, __func__, fmt, ##args)
-void __reiserfs_error(struct super_block *s, const char *id,
-		      const char *function, const char *fmt, ...);
+__printf(4, 5) void __reiserfs_error(struct super_block *s, const char *id,
+				     const char *function, const char *fmt, ...);
 #define reiserfs_error(s, id, fmt, args...) \
 	 __reiserfs_error(s, id, __func__, fmt, ##args)
-void reiserfs_info(struct super_block *s, const char *fmt, ...);
-void reiserfs_debug(struct super_block *s, int level, const char *fmt, ...);
+__printf(2, 3) void reiserfs_info(struct super_block *s, const char *fmt, ...);
+__printf(3, 4) void reiserfs_debug(struct super_block *s, int level,
+				   const char *fmt, ...);
 void print_indirect_item(struct buffer_head *bh, int item_num);
 void store_print_tb(struct tree_balance *tb);
 void print_cur_tb(char *mes);
diff --git a/fs/reiserfs/stree.c b/fs/reiserfs/stree.c
index 3f49562b92ba..d3842ca74e38 100644
--- a/fs/reiserfs/stree.c
+++ b/fs/reiserfs/stree.c
@@ -20,8 +20,12 @@
 inline int B_IS_IN_TREE(const struct buffer_head *bh)
 {
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 	RFALSE(B_LEVEL(bh) > MAX_HEIGHT,
 	       "PAP-1010: block (%b) has too big level (%z)", bh, bh);
+#pragma GCC diagnostic pop
 
 	return (B_LEVEL(bh) != FREE_LEVEL);
 }
@@ -395,9 +399,13 @@ static int has_valid_deh_location(struct buffer_head *bh, struct item_head *ih)
 	deh = B_I_DEH(bh, ih);
 	for (i = 0; i < ih_entry_count(ih); i++) {
 		if (deh_location(&deh[i]) > ih_item_len(ih)) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(NULL, "reiserfs-5094",
 					 "directory entry location seems wrong %h",
 					 &deh[i]);
+#pragma GCC diagnostic pop
 			return 0;
 		}
 	}
@@ -424,8 +432,12 @@ static int is_leaf(char *buf, int blocksize, struct buffer_head *bh)
 	nr = blkh_nr_item(blkh);
 	if (nr < 1 || nr > ((blocksize - BLKH_SIZE) / (IH_SIZE + MIN_ITEM_LEN))) {
 		/* item number is too big or too small */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_warning(NULL, "reiserfs-5081",
 				 "nr_item seems wrong: %z", bh);
+#pragma GCC diagnostic pop
 		return 0;
 	}
 	ih = (struct item_head *)(buf + BLKH_SIZE) + nr - 1;
@@ -433,8 +445,12 @@ static int is_leaf(char *buf, int blocksize, struct buffer_head *bh)
 
 	/* free space does not match to calculated amount of use space */
 	if (used_space != blocksize - blkh_free_space(blkh)) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_warning(NULL, "reiserfs-5082",
 				 "free space seems wrong: %z", bh);
+#pragma GCC diagnostic pop
 		return 0;
 	}
 	/*
@@ -447,36 +463,56 @@ static int is_leaf(char *buf, int blocksize, struct buffer_head *bh)
 	prev_location = blocksize;
 	for (i = 0; i < nr; i++, ih++) {
 		if (le_ih_k_type(ih) == TYPE_ANY) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(NULL, "reiserfs-5083",
 					 "wrong item type for item %h",
 					 ih);
+#pragma GCC diagnostic pop
 			return 0;
 		}
 		if (ih_location(ih) >= blocksize
 		    || ih_location(ih) < IH_SIZE * nr) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(NULL, "reiserfs-5084",
 					 "item location seems wrong: %h",
 					 ih);
+#pragma GCC diagnostic pop
 			return 0;
 		}
 		if (ih_item_len(ih) < 1
 		    || ih_item_len(ih) > MAX_ITEM_LEN(blocksize)) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(NULL, "reiserfs-5085",
 					 "item length seems wrong: %h",
 					 ih);
+#pragma GCC diagnostic pop
 			return 0;
 		}
 		if (prev_location - ih_location(ih) != ih_item_len(ih)) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(NULL, "reiserfs-5086",
 					 "item location seems wrong "
 					 "(second one): %h", ih);
+#pragma GCC diagnostic pop
 			return 0;
 		}
 		if (is_direntry_le_ih(ih)) {
 			if (ih_item_len(ih) < (ih_entry_count(ih) * IH_SIZE)) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 				reiserfs_warning(NULL, "reiserfs-5093",
 						 "item entry count seems wrong %h",
 						 ih);
+#pragma GCC diagnostic pop
 				return 0;
 			}
 			return has_valid_deh_location(bh, ih);
@@ -507,15 +543,23 @@ static int is_internal(char *buf, int blocksize, struct buffer_head *bh)
 	nr = blkh_nr_item(blkh);
 	/* for internal which is not root we might check min number of keys */
 	if (nr > (blocksize - BLKH_SIZE - DC_SIZE) / (KEY_SIZE + DC_SIZE)) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_warning(NULL, "reiserfs-5088",
 				 "number of key seems wrong: %z", bh);
+#pragma GCC diagnostic pop
 		return 0;
 	}
 
 	used_space = BLKH_SIZE + KEY_SIZE * nr + DC_SIZE * (nr + 1);
 	if (used_space != blocksize - blkh_free_space(blkh)) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_warning(NULL, "reiserfs-5089",
 				 "free space seems wrong: %z", bh);
+#pragma GCC diagnostic pop
 		return 0;
 	}
 
@@ -651,11 +695,15 @@ int search_by_key(struct super_block *sb, const struct cpu_key *key,
 
 #ifdef CONFIG_REISERFS_CHECK
 		if (!(++repeat_counter % 50000))
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(sb, "PAP-5100",
 					 "%s: there were %d iterations of "
 					 "while loop looking for key %K",
 					 current->comm, repeat_counter,
 					 key);
+#pragma GCC diagnostic pop
 #endif
 
 		/* prep path to have another element added to it. */
@@ -995,8 +1043,12 @@ static inline int prepare_for_direntry_item(struct treepath *path,
 {
 	if (le_ih_k_offset(le_ih) == DOT_OFFSET &&
 	    new_file_length == max_reiserfs_offset(inode)) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		RFALSE(ih_entry_count(le_ih) != 2,
 		       "PAP-5220: incorrect empty directory item (%h)", le_ih);
+#pragma GCC diagnostic pop
 		*cut_size = -(IH_SIZE + ih_item_len(le_ih));
 		/* Delete the directory item containing "." and ".." entry. */
 		return M_DELETE;
@@ -1299,9 +1351,13 @@ int reiserfs_delete_item(struct reiserfs_transaction_handle *th,
 		if (ret_value == IO_ERROR)
 			break;
 		if (ret_value == FILE_NOT_FOUND) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(sb, "vs-5340",
 					 "no items of the file %K found",
 					 item_key);
+#pragma GCC diagnostic pop
 			break;
 		}
 	}			/* while (1) */
@@ -1420,9 +1476,13 @@ void reiserfs_delete_solid_item(struct reiserfs_transaction_handle *th,
 	while (1) {
 		retval = search_item(th->t_super, &cpu_key, &path);
 		if (retval == IO_ERROR) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_error(th->t_super, "vs-5350",
 				       "i/o failure occurred trying "
 				       "to delete %K", &cpu_key);
+#pragma GCC diagnostic pop
 			break;
 		}
 		if (retval != ITEM_FOUND) {
@@ -1440,8 +1500,12 @@ void reiserfs_delete_solid_item(struct reiserfs_transaction_handle *th,
 			     GET_GENERATION_NUMBER(le_key_k_offset
 						   (le_key_version(key),
 						    key)) == 1))
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 				reiserfs_warning(th->t_super, "vs-5355",
 						 "%k not found", key);
+#pragma GCC diagnostic pop
 			break;
 		}
 		if (!tb_init) {
@@ -1481,9 +1545,13 @@ void reiserfs_delete_solid_item(struct reiserfs_transaction_handle *th,
 		}
 
 		/* IO_ERROR, NO_DISK_SPACE, etc */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_warning(th->t_super, "vs-5360",
 				 "could not delete %K due to fix_nodes failure",
 				 &cpu_key);
+#pragma GCC diagnostic pop
 		unfix_nodes(&tb);
 		break;
 	}
@@ -1726,9 +1794,13 @@ int reiserfs_cut_from_item(struct reiserfs_transaction_handle *th,
 				print_block(PATH_PLAST_BUFFER(path), 3,
 					    PATH_LAST_POSITION(path) - 1,
 					    PATH_LAST_POSITION(path) + 1);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 				reiserfs_panic(sb, "PAP-5580", "item to "
 					       "convert does not exist (%K)",
 					       item_key);
+#pragma GCC diagnostic pop
 			}
 			continue;
 		}
@@ -1750,8 +1822,12 @@ int reiserfs_cut_from_item(struct reiserfs_transaction_handle *th,
 		if (ret_value == POSITION_FOUND)
 			continue;
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_warning(sb, "PAP-5610", "item %K not found",
 				 item_key);
+#pragma GCC diagnostic pop
 		unfix_nodes(&s_cut_balance);
 		return (ret_value == IO_ERROR) ? -EIO : -ENOENT;
 	}			/* while */
@@ -1811,22 +1887,34 @@ int reiserfs_cut_from_item(struct reiserfs_transaction_handle *th,
 		 * sure, that we exactly remove last unformatted node pointer
 		 * of the item
 		 */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		if (!is_indirect_le_ih(le_ih))
 			reiserfs_panic(sb, "vs-5652",
 				       "item must be indirect %h", le_ih);
+#pragma GCC diagnostic pop
 
 		if (mode == M_DELETE && ih_item_len(le_ih) != UNFM_P_SIZE)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_panic(sb, "vs-5653", "completing "
 				       "indirect2direct conversion indirect "
 				       "item %h being deleted must be of "
 				       "4 byte long", le_ih);
+#pragma GCC diagnostic pop
 
 		if (mode == M_CUT
 		    && s_cut_balance.insert_size[0] != -UNFM_P_SIZE) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_panic(sb, "vs-5654", "can not complete "
 				       "indirect2direct conversion of %h "
 				       "(CUT, insert_size==%d)",
 				       le_ih, s_cut_balance.insert_size[0]);
+#pragma GCC diagnostic pop
 		}
 		/*
 		 * it would be useful to make sure, that right neighboring
@@ -1920,16 +2008,24 @@ int reiserfs_do_truncate(struct reiserfs_transaction_handle *th,
 	    search_for_position_by_key(inode->i_sb, &s_item_key,
 				       &s_search_path);
 	if (retval == IO_ERROR) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_error(inode->i_sb, "vs-5657",
 			       "i/o failure occurred trying to truncate %K",
 			       &s_item_key);
+#pragma GCC diagnostic pop
 		err = -EIO;
 		goto out;
 	}
 	if (retval == POSITION_FOUND || retval == FILE_NOT_FOUND) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_error(inode->i_sb, "PAP-5660",
 			       "wrong result %d of search for %K", retval,
 			       &s_item_key);
+#pragma GCC diagnostic pop
 
 		err = -EIO;
 		goto out;
@@ -1979,9 +2075,13 @@ int reiserfs_do_truncate(struct reiserfs_transaction_handle *th,
 			return 0;
 		}
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		RFALSE(deleted > file_size,
 		       "PAP-5670: reiserfs_cut_from_item: too many bytes deleted: deleted %d, file_size %lu, item_key %K",
 		       deleted, file_size, &s_item_key);
+#pragma GCC diagnostic pop
 
 		/* Change key to search the last file item. */
 		file_size -= deleted;
@@ -2055,10 +2155,14 @@ static void check_research_for_paste(struct treepath *path,
 		    || op_bytes_number(found_ih,
 				       get_last_bh(path)->b_size) !=
 		    pos_in_item(path))
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_panic(NULL, "PAP-5720", "found direct item "
 				       "%h or position (%d) does not match "
 				       "to key %K", found_ih,
 				       pos_in_item(path), key);
+#pragma GCC diagnostic pop
 	}
 	if (is_indirect_le_ih(found_ih)) {
 		if (le_ih_k_offset(found_ih) +
@@ -2067,10 +2171,14 @@ static void check_research_for_paste(struct treepath *path,
 		    cpu_key_k_offset(key)
 		    || I_UNFM_NUM(found_ih) != pos_in_item(path)
 		    || get_ih_free_space(found_ih) != 0)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_panic(NULL, "PAP-5730", "found indirect "
 				       "item (%h) or position (%d) does not "
 				       "match to key (%K)",
 				       found_ih, pos_in_item(path), key);
+#pragma GCC diagnostic pop
 	}
 }
 #endif				/* config reiserfs check */
@@ -2140,9 +2248,13 @@ int reiserfs_paste_into_item(struct reiserfs_transaction_handle *th,
 			goto error_out;
 		}
 		if (retval == POSITION_FOUND) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(inode->i_sb, "PAP-5710",
 					 "entry or pasted byte (%K) exists",
 					 key);
+#pragma GCC diagnostic pop
 			retval = -EEXIST;
 			goto error_out;
 		}
@@ -2248,9 +2360,13 @@ int reiserfs_insert_item(struct reiserfs_transaction_handle *th,
 			goto error_out;
 		}
 		if (retval == ITEM_FOUND) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(th->t_super, "PAP-5760",
 					 "key %K already exists in the tree",
 					 key);
+#pragma GCC diagnostic pop
 			retval = -EEXIST;
 			goto error_out;
 		}
diff --git a/fs/reiserfs/super.c b/fs/reiserfs/super.c
index cfb7c44c7366..2fa8595cb6d8 100644
--- a/fs/reiserfs/super.c
+++ b/fs/reiserfs/super.c
@@ -326,17 +326,25 @@ static int finish_unfinished(struct super_block *s)
 			 * the unlink almost completed, it just did not
 			 * manage to remove "save" link and release objectid
 			 */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(s, "vs-2180", "iget failed for %K",
 					 &obj_key);
+#pragma GCC diagnostic pop
 			retval = remove_save_link_only(s, &save_link_key, 1);
 			continue;
 		}
 
 		if (!truncate && inode->i_nlink) {
 			/* file is not unlinked */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(s, "vs-2185",
 					 "file %K is not unlinked",
 					 &obj_key);
+#pragma GCC diagnostic pop
 			retval = remove_save_link_only(s, &save_link_key, 0);
 			continue;
 		}
@@ -352,10 +360,14 @@ static int finish_unfinished(struct super_block *s)
 			 * into old kernel, remove the file and create dir
 			 * with the same key.
 			 */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(s, "green-2101",
 					 "impossible truncate on a "
 					 "directory %k. Please report",
 					 INODE_PKEY(inode));
+#pragma GCC diagnostic pop
 			retval = remove_save_link_only(s, &save_link_key, 0);
 			truncate = 0;
 			iput(inode);
@@ -369,8 +381,12 @@ static int finish_unfinished(struct super_block *s)
 			 * not completed truncate found. New size was
 			 * committed together with "save" link
 			 */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_info(s, "Truncating %k to %lld ..",
 				      INODE_PKEY(inode), inode->i_size);
+#pragma GCC diagnostic pop
 
 			/* don't update modification time */
 			reiserfs_truncate_file(inode, 0);
@@ -379,7 +395,11 @@ static int finish_unfinished(struct super_block *s)
 		} else {
 			REISERFS_I(inode)->i_flags |= i_link_saved_unlink_mask;
 			/* not completed unlink (rmdir) found */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_info(s, "Removing %k..", INODE_PKEY(inode));
+#pragma GCC diagnostic pop
 			if (memcmp(&last_inode_key, INODE_PKEY(inode),
 					sizeof(last_inode_key))){
 				last_inode_key = *INODE_PKEY(inode);
@@ -463,10 +483,14 @@ void add_save_link(struct reiserfs_transaction_handle *th,
 	} else {
 		/* truncate */
 		if (S_ISDIR(inode->i_mode))
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_warning(inode->i_sb, "green-2102",
 					 "Adding a truncate savelink for "
 					 "a directory %k! Please report",
 					 INODE_PKEY(inode));
+#pragma GCC diagnostic pop
 		set_cpu_key_k_offset(&key, 1);
 		set_cpu_key_k_type(&key, TYPE_INDIRECT);
 
@@ -480,9 +504,13 @@ void add_save_link(struct reiserfs_transaction_handle *th,
 	retval = search_item(inode->i_sb, &key, &path);
 	if (retval != ITEM_NOT_FOUND) {
 		if (retval != -ENOSPC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_error(inode->i_sb, "vs-2100",
 				       "search_by_key (%K) returned %d", &key,
 				       retval);
+#pragma GCC diagnostic pop
 		pathrelse(&path);
 		return;
 	}
diff --git a/fs/reiserfs/tail_conversion.c b/fs/reiserfs/tail_conversion.c
index b0ae088dffc7..291177b3c231 100644
--- a/fs/reiserfs/tail_conversion.c
+++ b/fs/reiserfs/tail_conversion.c
@@ -64,9 +64,13 @@ int direct2indirect(struct reiserfs_transaction_handle *th, struct inode *inode,
 
 	/* FIXME: we could avoid this */
 	if (search_for_position_by_key(sb, &end_key, path) == POSITION_FOUND) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_error(sb, "PAP-14030",
 			       "pasted or inserted byte exists in "
 			       "the tree %K. Use fsck to repair.", &end_key);
+#pragma GCC diagnostic pop
 		pathrelse(path);
 		return -EIO;
 	}
@@ -114,12 +118,20 @@ int direct2indirect(struct reiserfs_transaction_handle *th, struct inode *inode,
 		 */
 		if (search_for_position_by_key(sb, &end_key, path) ==
 		    POSITION_FOUND)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_panic(sb, "PAP-14050",
 				       "direct item (%K) not found", &end_key);
+#pragma GCC diagnostic pop
 		p_le_ih = tp_item_head(path);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		RFALSE(!is_direct_le_ih(p_le_ih),
 		       "vs-14055: direct item expected(%K), found %h",
 		       &end_key, p_le_ih);
+#pragma GCC diagnostic pop
 		tail_size = (le_ih_k_offset(p_le_ih) & (blk_size - 1))
 		    + ih_item_len(p_le_ih) - 1;
 
@@ -248,9 +260,13 @@ int indirect2direct(struct reiserfs_transaction_handle *th,
 		/* re-search indirect item */
 		if (search_for_position_by_key(sb, item_key, path)
 		    == POSITION_NOT_FOUND)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 			reiserfs_panic(sb, "PAP-5520",
 				       "item to be converted %K does not exist",
 				       item_key);
+#pragma GCC diagnostic pop
 		copy_item_head(&s_ih, tp_item_head(path));
 #ifdef CONFIG_REISERFS_CHECK
 		pos = le_ih_k_offset(&s_ih) - 1 +
diff --git a/fs/reiserfs/xattr.c b/fs/reiserfs/xattr.c
index bd073836e141..839911c12a8c 100644
--- a/fs/reiserfs/xattr.c
+++ b/fs/reiserfs/xattr.c
@@ -729,10 +729,14 @@ reiserfs_xattr_get(struct inode *inode, const char *name, void *buffer,
 			if (rxh->h_magic != cpu_to_le32(REISERFS_XATTR_MAGIC)) {
 				unlock_page(page);
 				reiserfs_put_page(page);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 				reiserfs_warning(inode->i_sb, "jdm-20001",
 						 "Invalid magic for xattr (%s) "
 						 "associated with %k", name,
 						 INODE_PKEY(inode));
+#pragma GCC diagnostic pop
 				err = -EIO;
 				goto out_unlock;
 			}
@@ -749,9 +753,13 @@ reiserfs_xattr_get(struct inode *inode, const char *name, void *buffer,
 
 	if (xattr_hash(buffer, isize - sizeof(struct reiserfs_xattr_header)) !=
 	    hash) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat"
+#pragma GCC diagnostic ignored "-Wformat-extra-args"
 		reiserfs_warning(inode->i_sb, "jdm-20002",
 				 "Invalid hash for xattr (%s) associated "
 				 "with %k", name, INODE_PKEY(inode));
+#pragma GCC diagnostic pop
 		err = -EIO;
 	}
 
-- 
