From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Sun, 5 Mar 2017 12:00:00 +0100
Subject: [PATCH] x86, relocs: add printf attribute to die()

Adding such an attribute helps to detect errors in the format string at
build time. After doing this, the compiler complains about some issues:

    arch/x86/tools/relocs.c:460:5: error: format specifies type 'int'
    but the argument has type 'Elf64_Xword' (aka 'unsigned long')
    [-Werror,-Wformat]
                                    sec->shdr.sh_size);
                                    ^~~~~~~~~~~~~~~~~
    arch/x86/tools/relocs.c:464:5: error: format specifies type 'int'
    but the argument has type 'Elf64_Off' (aka 'unsigned long')
    [-Werror,-Wformat]
                                    sec->shdr.sh_offset, strerror(errno));
                                    ^~~~~~~~~~~~~~~~~~~

When relocs.c is included by relocs_32.c, sec->shdr.sh_size and
sec->shdr.sh_offset are 32-bit unsigned integers. When the file is
included by relocs_64.c, these expressions are 64-bit unsigned integers.

Add casts to unsigned long long, which length is always 64-bit, and use
%llu to format sec->shdr.sh_size and sec->shdr.sh_offset in relocs.c.

While at it, constify the format attribute of die().

Signed-off-by: Nicolas Iooss <nicolas.iooss_linux@m4x.org>

Sent-upstream: https://patchwork.kernel.org/patch/9604651/
---
 arch/x86/tools/relocs.c        | 31 +++++++++++++++++--------------
 arch/x86/tools/relocs.h        |  3 ++-
 arch/x86/tools/relocs_common.c |  2 +-
 3 files changed, 20 insertions(+), 16 deletions(-)

diff --git a/arch/x86/tools/relocs.c b/arch/x86/tools/relocs.c
index 04c5a44b9682..0e33fbf729a5 100644
--- a/arch/x86/tools/relocs.c
+++ b/arch/x86/tools/relocs.c
@@ -416,8 +416,8 @@ static void read_shdrs(FILE *fp)
 		    shnum);
 	}
 	if (fseek(fp, ehdr.e_shoff, SEEK_SET) < 0) {
-		die("Seek to %d failed: %s\n",
-			ehdr.e_shoff, strerror(errno));
+		die("Seek to %llu failed: %s\n",
+			(unsigned long long)ehdr.e_shoff, strerror(errno));
 	}
 	for (i = 0; i < shnum; i++) {
 		struct section *sec = &secs[i];
@@ -450,12 +450,13 @@ static void read_strtabs(FILE *fp)
 		}
 		sec->strtab = malloc(sec->shdr.sh_size);
 		if (!sec->strtab) {
-			die("malloc of %d bytes for strtab failed\n",
-				sec->shdr.sh_size);
+			die("malloc of %llu bytes for strtab failed\n",
+				(unsigned long long)sec->shdr.sh_size);
 		}
 		if (fseek(fp, sec->shdr.sh_offset, SEEK_SET) < 0) {
-			die("Seek to %d failed: %s\n",
-				sec->shdr.sh_offset, strerror(errno));
+			die("Seek to %llu failed: %s\n",
+				(unsigned long long)sec->shdr.sh_offset,
+				strerror(errno));
 		}
 		if (fread(sec->strtab, 1, sec->shdr.sh_size, fp)
 		    != sec->shdr.sh_size) {
@@ -475,12 +476,13 @@ static void read_symtabs(FILE *fp)
 		}
 		sec->symtab = malloc(sec->shdr.sh_size);
 		if (!sec->symtab) {
-			die("malloc of %d bytes for symtab failed\n",
-				sec->shdr.sh_size);
+			die("malloc of %llu bytes for symtab failed\n",
+				(unsigned long long)sec->shdr.sh_size);
 		}
 		if (fseek(fp, sec->shdr.sh_offset, SEEK_SET) < 0) {
-			die("Seek to %d failed: %s\n",
-				sec->shdr.sh_offset, strerror(errno));
+			die("Seek to %llu failed: %s\n",
+				(unsigned long long)sec->shdr.sh_offset,
+				strerror(errno));
 		}
 		if (fread(sec->symtab, 1, sec->shdr.sh_size, fp)
 		    != sec->shdr.sh_size) {
@@ -508,12 +510,13 @@ static void read_relocs(FILE *fp)
 		}
 		sec->reltab = malloc(sec->shdr.sh_size);
 		if (!sec->reltab) {
-			die("malloc of %d bytes for relocs failed\n",
-				sec->shdr.sh_size);
+			die("malloc of %llu bytes for relocs failed\n",
+				(unsigned long long)sec->shdr.sh_size);
 		}
 		if (fseek(fp, sec->shdr.sh_offset, SEEK_SET) < 0) {
-			die("Seek to %d failed: %s\n",
-				sec->shdr.sh_offset, strerror(errno));
+			die("Seek to %llu failed: %s\n",
+				(unsigned long long)sec->shdr.sh_offset,
+				strerror(errno));
 		}
 		if (fread(sec->reltab, 1, sec->shdr.sh_size, fp)
 		    != sec->shdr.sh_size) {
diff --git a/arch/x86/tools/relocs.h b/arch/x86/tools/relocs.h
index 43c83c0fd22c..1e516e1a530e 100644
--- a/arch/x86/tools/relocs.h
+++ b/arch/x86/tools/relocs.h
@@ -17,7 +17,8 @@
 #include <regex.h>
 #include <tools/le_byteshift.h>
 
-void die(char *fmt, ...) __attribute__((noreturn));
+void die(const char *fmt, ...) __attribute__((noreturn))
+	__attribute__((format(printf, 1, 2)));
 
 #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
 
diff --git a/arch/x86/tools/relocs_common.c b/arch/x86/tools/relocs_common.c
index 6634352a20bc..11a3e45cd991 100644
--- a/arch/x86/tools/relocs_common.c
+++ b/arch/x86/tools/relocs_common.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 #include "relocs.h"
 
-void die(char *fmt, ...)
+void die(const char *fmt, ...)
 {
 	va_list ap;
 	va_start(ap, fmt);
-- 
