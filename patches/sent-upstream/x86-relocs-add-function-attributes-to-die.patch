From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Sun, 4 Sep 2016 18:39:50 +0200
Subject: [PATCH] x86, relocs: add function attributes to die()

When building the kernel with clang and some warning flags, the compiler
reports the following warning:

    arch/x86/tools/relocs.c:979:6: warning: variable 'do_reloc' is used
    uninitialized whenever 'if' condition is false
    [-Wsometimes-uninitialized]
            if (!use_real_mode)
                ^~~~~~~~~~~~~~
    arch/x86/tools/relocs.c:991:14: note: uninitialized use occurs here
            walk_relocs(do_reloc);
                        ^~~~~~~~
    arch/x86/tools/relocs.c:979:2: note: remove the 'if' if its
    condition is always true
            if (!use_real_mode)
            ^~~~~~~~~~~~~~~~~~~
    arch/x86/tools/relocs.c:976:24: note: initialize the variable
    'do_reloc' to silence this warning
                            const char *symname);
                                                ^
                                                 = NULL

This is obviously a false positive: whenever the 'if' condition is
false, the program calls die(). Nevertheless the compiler did not know
this call makes the program quit because this function did not have a
noreturn attribute. Add it.

While at it, add a printf attribute too to die() and constify the format
parameter. This leads to some errors when compiling on x86_64:

    arch/x86/tools/relocs.c:460:5: error: format specifies type 'int'
    but the argument has type 'Elf64_Xword' (aka 'unsigned long')
    [-Werror,-Wformat]
                                    sec->shdr.sh_size);
                                    ^~~~~~~~~~~~~~~~~
    arch/x86/tools/relocs.c:464:5: error: format specifies type 'int'
    but the argument has type 'Elf64_Off' (aka 'unsigned long')
    [-Werror,-Wformat]
                                    sec->shdr.sh_offset, strerror(errno));
                                    ^~~~~~~~~~~~~~~~~~~

When relocs.c is included by relocs_32.c, sec->shdr.sh_size and
sec->shdr.sh_offset are 32-bit unsigned integers. When the file is
included by relocs_64.c, these expressions are 64-bit unsigned integers.

Introduce a PRIuELF macro to define the right format to use when
printing these expressions.

Signed-off-by: Nicolas Iooss <nicolas.iooss_linux@m4x.org>

Sent-upstream: https://lkml.org/lkml/2016/9/4/133
---
 arch/x86/tools/relocs.c        | 14 +++++++-------
 arch/x86/tools/relocs.h        |  3 ++-
 arch/x86/tools/relocs_32.c     |  3 +++
 arch/x86/tools/relocs_64.c     |  3 +++
 arch/x86/tools/relocs_common.c |  2 +-
 5 files changed, 16 insertions(+), 9 deletions(-)

diff --git a/arch/x86/tools/relocs.c b/arch/x86/tools/relocs.c
index 0c2fae8d929d..4cad603b8d58 100644
--- a/arch/x86/tools/relocs.c
+++ b/arch/x86/tools/relocs.c
@@ -397,7 +397,7 @@ static void read_shdrs(FILE *fp)
 		    ehdr.e_shnum);
 	}
 	if (fseek(fp, ehdr.e_shoff, SEEK_SET) < 0) {
-		die("Seek to %d failed: %s\n",
+		die("Seek to %"PRIuELF" failed: %s\n",
 			ehdr.e_shoff, strerror(errno));
 	}
 	for (i = 0; i < ehdr.e_shnum; i++) {
@@ -431,11 +431,11 @@ static void read_strtabs(FILE *fp)
 		}
 		sec->strtab = malloc(sec->shdr.sh_size);
 		if (!sec->strtab) {
-			die("malloc of %d bytes for strtab failed\n",
+			die("malloc of %"PRIuELF" bytes for strtab failed\n",
 				sec->shdr.sh_size);
 		}
 		if (fseek(fp, sec->shdr.sh_offset, SEEK_SET) < 0) {
-			die("Seek to %d failed: %s\n",
+			die("Seek to %"PRIuELF" failed: %s\n",
 				sec->shdr.sh_offset, strerror(errno));
 		}
 		if (fread(sec->strtab, 1, sec->shdr.sh_size, fp)
@@ -456,11 +456,11 @@ static void read_symtabs(FILE *fp)
 		}
 		sec->symtab = malloc(sec->shdr.sh_size);
 		if (!sec->symtab) {
-			die("malloc of %d bytes for symtab failed\n",
+			die("malloc of %"PRIuELF" bytes for symtab failed\n",
 				sec->shdr.sh_size);
 		}
 		if (fseek(fp, sec->shdr.sh_offset, SEEK_SET) < 0) {
-			die("Seek to %d failed: %s\n",
+			die("Seek to %"PRIuELF" failed: %s\n",
 				sec->shdr.sh_offset, strerror(errno));
 		}
 		if (fread(sec->symtab, 1, sec->shdr.sh_size, fp)
@@ -489,11 +489,11 @@ static void read_relocs(FILE *fp)
 		}
 		sec->reltab = malloc(sec->shdr.sh_size);
 		if (!sec->reltab) {
-			die("malloc of %d bytes for relocs failed\n",
+			die("malloc of %"PRIuELF" bytes for relocs failed\n",
 				sec->shdr.sh_size);
 		}
 		if (fseek(fp, sec->shdr.sh_offset, SEEK_SET) < 0) {
-			die("Seek to %d failed: %s\n",
+			die("Seek to %"PRIuELF" failed: %s\n",
 				sec->shdr.sh_offset, strerror(errno));
 		}
 		if (fread(sec->reltab, 1, sec->shdr.sh_size, fp)
diff --git a/arch/x86/tools/relocs.h b/arch/x86/tools/relocs.h
index f59590645b68..6b7969719833 100644
--- a/arch/x86/tools/relocs.h
+++ b/arch/x86/tools/relocs.h
@@ -16,7 +16,8 @@
 #include <regex.h>
 #include <tools/le_byteshift.h>
 
-void die(char *fmt, ...);
+__attribute__((format(printf, 1, 2))) __attribute__((noreturn))
+void die(const char *fmt, ...);
 
 #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
 
diff --git a/arch/x86/tools/relocs_32.c b/arch/x86/tools/relocs_32.c
index b2ade2bb4162..8024ec473e6a 100644
--- a/arch/x86/tools/relocs_32.c
+++ b/arch/x86/tools/relocs_32.c
@@ -14,4 +14,7 @@
 #define ELF_ST_BIND(o)		ELF32_ST_BIND(o)
 #define ELF_ST_VISIBILITY(o)	ELF32_ST_VISIBILITY(o)
 
+/* printf format for Elf32_Off */
+#define PRIuELF PRIu32
+
 #include "relocs.c"
diff --git a/arch/x86/tools/relocs_64.c b/arch/x86/tools/relocs_64.c
index 56b61b743c4c..2cf4de5c9d99 100644
--- a/arch/x86/tools/relocs_64.c
+++ b/arch/x86/tools/relocs_64.c
@@ -14,4 +14,7 @@
 #define ELF_ST_BIND(o)          ELF64_ST_BIND(o)
 #define ELF_ST_VISIBILITY(o)    ELF64_ST_VISIBILITY(o)
 
+/* printf format for Elf64_Off */
+#define PRIuELF PRIu64
+
 #include "relocs.c"
diff --git a/arch/x86/tools/relocs_common.c b/arch/x86/tools/relocs_common.c
index acab636bcb34..30adb44eff79 100644
--- a/arch/x86/tools/relocs_common.c
+++ b/arch/x86/tools/relocs_common.c
@@ -1,6 +1,6 @@
 #include "relocs.h"
 
-void die(char *fmt, ...)
+void die(const char *fmt, ...)
 {
 	va_list ap;
 	va_start(ap, fmt);
-- 
