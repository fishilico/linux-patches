From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Fri, 16 Dec 2016 09:44:44 +0100
Subject: [PATCH] {PRINTF} staging: vc04_services: merge sprintf+kthread_create
 calls

This silents a -Wformat-security warning found by clang:

    drivers/staging/vc04_services/interface/vchiq_arm/vchiq_arm.c:2881:5:
    error: format string is not a string literal (potentially insecure)
    [-Werror,-Wformat-security]
                                    threadname);
                                    ^~~~~~~~~~
    include/linux/kthread.h:25:55: note: expanded from macro
    'kthread_create'
            kthread_create_on_node(threadfn, data, NUMA_NO_NODE, namefmt, ##arg)
                                                                 ^~~~~~~
    drivers/staging/vc04_services/interface/vchiq_arm/vchiq_arm.c:2881:5:
    note: treat the string as an argument to avoid this
                                    threadname);
                                    ^
                                    "%s",
    include/linux/kthread.h:25:55: note: expanded from macro
    'kthread_create'
            kthread_create_on_node(threadfn, data, NUMA_NO_NODE, namefmt, ##arg)
                                                                 ^
---
 .../interface/vchiq_arm/vchiq_arm.c           | 11 ++++-------
 .../interface/vchiq_arm/vchiq_core.c          | 19 +++++++++----------
 2 files changed, 13 insertions(+), 17 deletions(-)

diff --git a/drivers/staging/vc04_services/interface/vchiq_arm/vchiq_arm.c b/drivers/staging/vc04_services/interface/vchiq_arm/vchiq_arm.c
index 804daf83be35..1980a9f9327b 100644
--- a/drivers/staging/vc04_services/interface/vchiq_arm/vchiq_arm.c
+++ b/drivers/staging/vc04_services/interface/vchiq_arm/vchiq_arm.c
@@ -3457,20 +3457,17 @@ void vchiq_platform_conn_state_changed(struct vchiq_state *state,
 	if (state->conn_state == VCHIQ_CONNSTATE_CONNECTED) {
 		write_lock_bh(&arm_state->susp_res_lock);
 		if (!arm_state->first_connect) {
-			char threadname[16];
-
 			arm_state->first_connect = 1;
 			write_unlock_bh(&arm_state->susp_res_lock);
-			snprintf(threadname, sizeof(threadname), "vchiq-keep/%d",
-				state->id);
 			arm_state->ka_thread = kthread_create(
 				&vchiq_keepalive_thread_func,
 				(void *)state,
-				threadname);
+				"vchiq-keep/%d",
+				state->id);
 			if (IS_ERR(arm_state->ka_thread)) {
 				vchiq_log_error(vchiq_susp_log_level,
-					"vchiq: FATAL: couldn't create thread %s",
-					threadname);
+					"vchiq: FATAL: couldn't create thread vchiq-keep/%d",
+					state->id);
 			} else {
 				wake_up_process(arm_state->ka_thread);
 			}
diff --git a/drivers/staging/vc04_services/interface/vchiq_arm/vchiq_core.c b/drivers/staging/vc04_services/interface/vchiq_arm/vchiq_core.c
index 53f5a1cb4636..12483942230d 100644
--- a/drivers/staging/vc04_services/interface/vchiq_arm/vchiq_core.c
+++ b/drivers/staging/vc04_services/interface/vchiq_arm/vchiq_core.c
@@ -2151,7 +2151,6 @@ vchiq_init_state(struct vchiq_state *state, struct vchiq_slot_zero *slot_zero)
 	struct vchiq_shared_state *local;
 	struct vchiq_shared_state *remote;
 	VCHIQ_STATUS_T status;
-	char threadname[16];
 	int i;
 
 	vchiq_log_warning(vchiq_core_log_level,
@@ -2243,38 +2242,38 @@ vchiq_init_state(struct vchiq_state *state, struct vchiq_slot_zero *slot_zero)
 	/*
 		bring up slot handler thread
 	 */
-	snprintf(threadname, sizeof(threadname), "vchiq-slot/%d", state->id);
 	state->slot_handler_thread = kthread_create(&slot_handler_func,
 		(void *)state,
-		threadname);
+		"vchiq-slot/%d",
+		state->id);
 
 	if (IS_ERR(state->slot_handler_thread)) {
 		vchiq_loud_error_header();
-		vchiq_loud_error("couldn't create thread %s", threadname);
+		vchiq_loud_error("couldn't create thread vchiq-slot/%d", state->id);
 		vchiq_loud_error_footer();
 		return VCHIQ_ERROR;
 	}
 	set_user_nice(state->slot_handler_thread, -19);
 
-	snprintf(threadname, sizeof(threadname), "vchiq-recy/%d", state->id);
 	state->recycle_thread = kthread_create(&recycle_func,
 		(void *)state,
-		threadname);
+		"vchiq-recy/%d",
+		state->id);
 	if (IS_ERR(state->recycle_thread)) {
 		vchiq_loud_error_header();
-		vchiq_loud_error("couldn't create thread %s", threadname);
+		vchiq_loud_error("couldn't create thread vchiq-recy/%d", state->id);
 		vchiq_loud_error_footer();
 		goto fail_free_handler_thread;
 	}
 	set_user_nice(state->recycle_thread, -19);
 
-	snprintf(threadname, sizeof(threadname), "vchiq-sync/%d", state->id);
 	state->sync_thread = kthread_create(&sync_func,
 		(void *)state,
-		threadname);
+		"vchiq-sync/%d",
+		state->id);
 	if (IS_ERR(state->sync_thread)) {
 		vchiq_loud_error_header();
-		vchiq_loud_error("couldn't create thread %s", threadname);
+		vchiq_loud_error("couldn't create thread vchiq-sync/%d", state->id);
 		vchiq_loud_error_footer();
 		goto fail_free_recycle_thread;
 	}
-- 
