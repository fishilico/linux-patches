From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Sat, 28 Sep 2019 08:34:28 +0200
Subject: [PATCH] {MAYBE UPS} drivers/staging/octeon: fix ptr cast

gcc on x86-32 warns about casting pointers to u64.
---
 drivers/net/mdio/mdio-cavium.c | 20 ++++++++++----------
 drivers/net/mdio/mdio-octeon.c |  6 +++---
 2 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/drivers/net/mdio/mdio-cavium.c b/drivers/net/mdio/mdio-cavium.c
index 100e46a702ee..339c71c52f7e 100644
--- a/drivers/net/mdio/mdio-cavium.c
+++ b/drivers/net/mdio/mdio-cavium.c
@@ -18,10 +18,10 @@ static void cavium_mdiobus_set_mode(struct cavium_mdiobus *p,
 	if (m == p->mode)
 		return;
 
-	smi_clk.u64 = oct_mdio_readq(p->register_base + SMI_CLK);
+	smi_clk.u64 = oct_mdio_readq((uintptr_t)p->register_base + SMI_CLK);
 	smi_clk.s.mode = (m == C45) ? 1 : 0;
 	smi_clk.s.preamble = 1;
-	oct_mdio_writeq(smi_clk.u64, p->register_base + SMI_CLK);
+	oct_mdio_writeq(smi_clk.u64, (uintptr_t)p->register_base + SMI_CLK);
 	p->mode = m;
 }
 
@@ -36,20 +36,20 @@ static int cavium_mdiobus_c45_addr(struct cavium_mdiobus *p,
 
 	smi_wr.u64 = 0;
 	smi_wr.s.dat = regnum & 0xffff;
-	oct_mdio_writeq(smi_wr.u64, p->register_base + SMI_WR_DAT);
+	oct_mdio_writeq(smi_wr.u64, (uintptr_t)p->register_base + SMI_WR_DAT);
 
 	smi_cmd.u64 = 0;
 	smi_cmd.s.phy_op = 0; /* MDIO_CLAUSE_45_ADDRESS */
 	smi_cmd.s.phy_adr = phy_id;
 	smi_cmd.s.reg_adr = devad;
-	oct_mdio_writeq(smi_cmd.u64, p->register_base + SMI_CMD);
+	oct_mdio_writeq(smi_cmd.u64, (uintptr_t)p->register_base + SMI_CMD);
 
 	do {
 		/* Wait 1000 clocks so we don't saturate the RSL bus
 		 * doing reads.
 		 */
 		__delay(1000);
-		smi_wr.u64 = oct_mdio_readq(p->register_base + SMI_WR_DAT);
+		smi_wr.u64 = oct_mdio_readq((uintptr_t)p->register_base + SMI_WR_DAT);
 	} while (smi_wr.s.pending && --timeout);
 
 	if (timeout <= 0)
@@ -70,14 +70,14 @@ int cavium_mdiobus_read_c22(struct mii_bus *bus, int phy_id, int regnum)
 	smi_cmd.s.phy_op = 1; /* MDIO_CLAUSE_22_READ */
 	smi_cmd.s.phy_adr = phy_id;
 	smi_cmd.s.reg_adr = regnum;
-	oct_mdio_writeq(smi_cmd.u64, p->register_base + SMI_CMD);
+	oct_mdio_writeq(smi_cmd.u64, (uintptr_t)p->register_base + SMI_CMD);
 
 	do {
 		/* Wait 1000 clocks so we don't saturate the RSL bus
 		 * doing reads.
 		 */
 		__delay(1000);
-		smi_rd.u64 = oct_mdio_readq(p->register_base + SMI_RD_DAT);
+		smi_rd.u64 = oct_mdio_readq((uintptr_t)p->register_base + SMI_RD_DAT);
 	} while (smi_rd.s.pending && --timeout);
 
 	if (smi_rd.s.val)
@@ -133,20 +133,20 @@ int cavium_mdiobus_write_c22(struct mii_bus *bus, int phy_id, int regnum,
 
 	smi_wr.u64 = 0;
 	smi_wr.s.dat = val;
-	oct_mdio_writeq(smi_wr.u64, p->register_base + SMI_WR_DAT);
+	oct_mdio_writeq(smi_wr.u64, (uintptr_t)p->register_base + SMI_WR_DAT);
 
 	smi_cmd.u64 = 0;
 	smi_cmd.s.phy_op = 0; /* MDIO_CLAUSE_22_WRITE */
 	smi_cmd.s.phy_adr = phy_id;
 	smi_cmd.s.reg_adr = regnum;
-	oct_mdio_writeq(smi_cmd.u64, p->register_base + SMI_CMD);
+	oct_mdio_writeq(smi_cmd.u64, (uintptr_t)p->register_base + SMI_CMD);
 
 	do {
 		/* Wait 1000 clocks so we don't saturate the RSL bus
 		 * doing reads.
 		 */
 		__delay(1000);
-		smi_wr.u64 = oct_mdio_readq(p->register_base + SMI_WR_DAT);
+		smi_wr.u64 = oct_mdio_readq((uintptr_t)p->register_base + SMI_WR_DAT);
 	} while (smi_wr.s.pending && --timeout);
 
 	if (timeout <= 0)
diff --git a/drivers/net/mdio/mdio-octeon.c b/drivers/net/mdio/mdio-octeon.c
index 7c65c547d377..6885c49141e4 100644
--- a/drivers/net/mdio/mdio-octeon.c
+++ b/drivers/net/mdio/mdio-octeon.c
@@ -52,7 +52,7 @@ static int octeon_mdiobus_probe(struct platform_device *pdev)
 
 	smi_en.u64 = 0;
 	smi_en.s.en = 1;
-	oct_mdio_writeq(smi_en.u64, bus->register_base + SMI_EN);
+	oct_mdio_writeq(smi_en.u64, (uintptr_t)bus->register_base + SMI_EN);
 
 	bus->mii_bus->name = KBUILD_MODNAME;
 	snprintf(bus->mii_bus->id, MII_BUS_ID_SIZE, "%px", bus->register_base);
@@ -74,7 +74,7 @@ static int octeon_mdiobus_probe(struct platform_device *pdev)
 	return 0;
 fail_register:
 	smi_en.u64 = 0;
-	oct_mdio_writeq(smi_en.u64, bus->register_base + SMI_EN);
+	oct_mdio_writeq(smi_en.u64, (uintptr_t)bus->register_base + SMI_EN);
 	return err;
 }
 
@@ -87,7 +87,7 @@ static int octeon_mdiobus_remove(struct platform_device *pdev)
 
 	mdiobus_unregister(bus->mii_bus);
 	smi_en.u64 = 0;
-	oct_mdio_writeq(smi_en.u64, bus->register_base + SMI_EN);
+	oct_mdio_writeq(smi_en.u64, (uintptr_t)bus->register_base + SMI_EN);
 	return 0;
 }
 
-- 
