From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Sat, 22 Oct 2016 11:43:09 +0200
Subject: [PATCH] {MAYBE UPS} Make request_module() callable without a format
 string

This avoid having to use %s when using format strings
---
 include/linux/kmod.h | 18 ++++++++++++------
 kernel/kmod.c        | 45 +++++++++++++++++++++++++++++++++-----------
 2 files changed, 46 insertions(+), 17 deletions(-)

diff --git a/include/linux/kmod.h b/include/linux/kmod.h
index 68f69362d427..c44a5c04feb2 100644
--- a/include/linux/kmod.h
+++ b/include/linux/kmod.h
@@ -20,15 +20,21 @@
 extern char modprobe_path[]; /* for sysctl */
 /* modprobe exit status on success, -ve on error.  Return value
  * usually useless though. */
+int __request_module(bool wait, const char *name);
 extern __printf(2, 3)
-int __request_module(bool wait, const char *name, ...);
-#define request_module(mod...) __request_module(true, mod)
-#define request_module_nowait(mod...) __request_module(false, mod)
+int __request_module_fmt(bool wait, const char *name, ...);
+
+/* Switch on varargs */
+#define __request_module_maybe_fmt(w, mod...) \
+	has_args(__request_module_fmt, __request_module, mod)(w, mod)
+
+#define request_module(mod...) __request_module_maybe_fmt(true, mod)
+#define request_module_nowait(mod...) __request_module_maybe_fmt(false, mod)
 #define try_then_request_module(x, mod...) \
-	((x) ?: (__request_module(true, mod), (x)))
+	((x) ?: (__request_module_maybe_fmt(true, mod), (x)))
 #else
-static inline int request_module(const char *name, ...) { return -ENOSYS; }
-static inline int request_module_nowait(const char *name, ...) { return -ENOSYS; }
+static inline __printf(1, 2) int request_module(const char *name, ...) { return -ENOSYS; }
+static inline __printf(1, 2) int request_module_nowait(const char *name, ...) { return -ENOSYS; }
 #define try_then_request_module(x, mod...) (x)
 #endif
 
diff --git a/kernel/kmod.c b/kernel/kmod.c
index fb6e9b2be354..8578cd849d8e 100644
--- a/kernel/kmod.c
+++ b/kernel/kmod.c
@@ -109,8 +109,7 @@ static int call_modprobe(const char *modname, int wait)
 /**
  * __request_module - try to load a kernel module
  * @wait: wait (or not) for the operation to complete
- * @fmt: printf style format string for the name of the module
- * @...: arguments as specified in the format string
+ * @module_name: name of the module
  *
  * Load a module using the user mode module loader. The function returns
  * zero on success or a negative errno code or positive exit code from
@@ -122,10 +121,8 @@ static int call_modprobe(const char *modname, int wait)
  * If module auto-loading support is disabled then this function
  * simply returns -ENOENT.
  */
-int __request_module(bool wait, const char *fmt, ...)
+int __request_module(bool wait, const char *module_name)
 {
-	va_list args;
-	char module_name[MODULE_NAME_LEN];
 	int ret;
 
 	/*
@@ -139,12 +136,6 @@ int __request_module(bool wait, const char *fmt, ...)
 	if (!modprobe_path[0])
 		return -ENOENT;
 
-	va_start(args, fmt);
-	ret = vsnprintf(module_name, MODULE_NAME_LEN, fmt, args);
-	va_end(args);
-	if (ret >= MODULE_NAME_LEN)
-		return -ENAMETOOLONG;
-
 	ret = security_kernel_module_request(module_name);
 	if (ret)
 		return ret;
@@ -176,3 +167,35 @@ int __request_module(bool wait, const char *fmt, ...)
 	return ret;
 }
 EXPORT_SYMBOL(__request_module);
+
+/**
+ * __request_module_fmt - try to load a kernel module with a format string
+ * @wait: wait (or not) for the operation to complete
+ * @fmt: printf style format string for the name of the module
+ * @...: arguments as specified in the format string
+ *
+ * Load a module using the user mode module loader. The function returns
+ * zero on success or a negative errno code or positive exit code from
+ * "modprobe" on failure. Note that a successful module load does not mean
+ * the module did not then unload and exit on an error of its own. Callers
+ * must check that the service they requested is now available not blindly
+ * invoke it.
+ *
+ * If module auto-loading support is disabled then this function
+ * becomes a no-operation.
+ */
+int __request_module_fmt(bool wait, const char *fmt, ...)
+{
+	va_list args;
+	char module_name[MODULE_NAME_LEN];
+	int ret;
+
+	va_start(args, fmt);
+	ret = vsnprintf(module_name, MODULE_NAME_LEN, fmt, args);
+	va_end(args);
+	if (ret >= MODULE_NAME_LEN)
+		return -ENAMETOOLONG;
+
+	return __request_module(wait, module_name);
+}
+EXPORT_SYMBOL(__request_module_fmt);
-- 
