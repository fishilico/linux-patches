From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Fri, 21 Aug 2020 20:26:12 +0200
Subject: [PATCH] {MAYBE UPS} drivers/net/ethernet/aquantia/atlantic: udelay is
 too long

When building ARM with gcc:

    ERROR: modpost: "__bad_udelay" [drivers/net/ethernet/aquantia/atlantic/atlantic.ko] undefined!

Because

    err = readx_poll_timeout_atomic(hw_atl_b0_ts_ready_and_latch_high_get,
        self, val, val == 1, 10000U, 500000U);

became

    err = ({
        u64 __timeout_us = (500000U);
        unsigned long __delay_us = (10000U);
        ktime_t __timeout = ktime_add_us(ktime_get(), __timeout_us);
        if (false && __delay_us)
            (__builtin_constant_p(__delay_us) ? ((__delay_us) > (2 * 1000) ? __bad_udelay() : arm_delay_ops.const_udelay((__delay_us) * (((2147 * 100 + 483648 * 100 / 1000000UL))))) : arm_delay_ops.udelay(__delay_us));
        for (;;) {
            (val) = hw_atl_b0_ts_ready_and_latch_high_get(self);
            if (val == 1) break;
            if (__timeout_us && ktime_compare(ktime_get(), __timeout) > 0) {
                (val) = hw_atl_b0_ts_ready_and_latch_high_get(self);
                break;
            }
            if (__delay_us)
                (__builtin_constant_p(__delay_us) ? ((__delay_us) > (2 * 1000) ? __bad_udelay() : arm_delay_ops.const_udelay((__delay_us) * (((2147 * 100 + 483648 * 100 / 1000000UL))))) : arm_delay_ops.udelay(__delay_us));
        }
        (val == 1) ? 0 : -110;
    })
---
 drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
index 16a944707ba9..5bf416c29d8e 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
@@ -1632,7 +1632,7 @@ static int hw_atl_b0_get_mac_temp(struct aq_hw_s *self, u32 *temp)
 	}
 
 	err = readx_poll_timeout_atomic(hw_atl_b0_ts_ready_and_latch_high_get,
-					self, val, val == 1, 10000U, 500000U);
+					self, val, val == 1, /* 10000U is bad */ 1000U, 500000U);
 	if (err)
 		return err;
 
-- 
