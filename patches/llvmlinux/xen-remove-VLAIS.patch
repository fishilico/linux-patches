From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Mon, 8 May 2017 11:37:13 +0200
Subject: [PATCH] {LLVMLinux} xen: remove VLAIS

clang reports:

    arch/x86/xen/mmu_pv.c:1384:18: error: fields must have a constant
    size: 'variable length array in structure' extension will never be
    supported
                DECLARE_BITMAP(mask, num_processors);
                               ^
---
 arch/x86/xen/mmu_pv.c | 32 ++++++++++++++++++--------------
 1 file changed, 18 insertions(+), 14 deletions(-)

diff --git a/arch/x86/xen/mmu_pv.c b/arch/x86/xen/mmu_pv.c
index fc048ec686e7..e928d7787f95 100644
--- a/arch/x86/xen/mmu_pv.c
+++ b/arch/x86/xen/mmu_pv.c
@@ -1323,14 +1323,8 @@ static void xen_flush_tlb_single(unsigned long addr)
 static void xen_flush_tlb_others(const struct cpumask *cpus,
 				 const struct flush_tlb_info *info)
 {
-	struct {
-		struct mmuext_op op;
-#ifdef CONFIG_SMP
-		DECLARE_BITMAP(mask, num_processors);
-#else
-		DECLARE_BITMAP(mask, NR_CPUS);
-#endif
-	} *args;
+	struct mmuext_op *op;
+	struct cpumask *mask;
 	struct multicall_space mcs;
 
 	trace_xen_mmu_flush_tlb_others(cpus, info->mm, info->start, info->end);
@@ -1338,22 +1332,32 @@ static void xen_flush_tlb_others(const struct cpumask *cpus,
 	if (cpumask_empty(cpus))
 		return;		/* nothing to do */
 
+/*
 	mcs = xen_mc_entry(sizeof(*args));
 	args = mcs.args;
 	args->op.arg2.vcpumask = to_cpumask(args->mask);
+*/
+#ifdef CONFIG_SMP
+	mcs = xen_mc_entry(sizeof(struct mmuext_op) + BITS_TO_LONGS(num_processors)*sizeof(unsigned long));
+#else
+	mcs = xen_mc_entry(sizeof(struct mmuext_op) + BITS_TO_LONGS(NR_CPUS)*sizeof(unsigned long));
+#endif
+	op = mcs.args;
+	mask = to_cpumask(mcs.args + sizeof(struct mmuext_op));
+	op->arg2.vcpumask = mask;
 
 	/* Remove us, and any offline CPUS. */
-	cpumask_and(to_cpumask(args->mask), cpus, cpu_online_mask);
-	cpumask_clear_cpu(smp_processor_id(), to_cpumask(args->mask));
+	cpumask_and(mask, cpus, cpu_online_mask);
+	cpumask_clear_cpu(smp_processor_id(), mask);
 
-	args->op.cmd = MMUEXT_TLB_FLUSH_MULTI;
+	op->cmd = MMUEXT_TLB_FLUSH_MULTI;
 	if (info->end != TLB_FLUSH_ALL &&
 	    (info->end - info->start) <= PAGE_SIZE) {
-		args->op.cmd = MMUEXT_INVLPG_MULTI;
-		args->op.arg1.linear_addr = info->start;
+		op->cmd = MMUEXT_INVLPG_MULTI;
+		op->arg1.linear_addr = info->start;
 	}
 
-	MULTI_mmuext_op(mcs.mc, &args->op, 1, NULL, DOMID_SELF);
+	MULTI_mmuext_op(mcs.mc, op, 1, NULL, DOMID_SELF);
 
 	xen_mc_issue(PARAVIRT_LAZY_MMU);
 }
-- 
