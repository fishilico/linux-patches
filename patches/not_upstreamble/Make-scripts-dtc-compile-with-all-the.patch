From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Fri, 3 Jul 2015 14:24:24 +0800
Subject: [PATCH] {NOT UPSTREAMABLE} Make scripts/dtc compile with all the
 enabled -Werror=...

TODO: send fixes to dtc upstream:
    https://git.kernel.org/cgit/utils/dtc/dtc.git/
    https://github.com/dgibson/dtc
---
 scripts/dtc/checks.c        |  8 ++++----
 scripts/dtc/data.c          |  6 +++---
 scripts/dtc/dtc-lexer.l     |  2 +-
 scripts/dtc/dtc.c           | 12 ++++++------
 scripts/dtc/dtc.h           | 16 ++++++++--------
 scripts/dtc/libfdt/libfdt.h | 13 ++++++++-----
 scripts/dtc/livetree.c      | 16 ++++++++--------
 scripts/dtc/srcpos.c        |  2 +-
 scripts/dtc/treesource.c    |  8 ++++----
 9 files changed, 43 insertions(+), 40 deletions(-)

diff --git a/scripts/dtc/checks.c b/scripts/dtc/checks.c
index 781ba1129a8e..1d5faa2c4440 100644
--- a/scripts/dtc/checks.c
+++ b/scripts/dtc/checks.c
@@ -31,7 +31,7 @@ typedef void (*check_fn)(struct check *c, struct dt_info *dti, struct node *node
 struct check {
 	const char *name;
 	check_fn fn;
-	void *data;
+	const void *data;
 	bool warn, error;
 	enum checkstatus status;
 	bool inprogress;
@@ -207,7 +207,7 @@ static void check_is_string(struct check *c, struct dt_info *dti,
 			    struct node *node)
 {
 	struct property *prop;
-	char *propname = c->data;
+	const char *propname = c->data;
 
 	prop = get_property(node, propname);
 	if (!prop)
@@ -254,7 +254,7 @@ static void check_is_cell(struct check *c, struct dt_info *dti,
 			  struct node *node)
 {
 	struct property *prop;
-	char *propname = c->data;
+	const char *propname = c->data;
 
 	prop = get_property(node, propname);
 	if (!prop)
@@ -587,7 +587,7 @@ static void check_name_properties(struct check *c, struct dt_info *dti,
 		/* The name property is correct, and therefore redundant.
 		 * Delete it */
 		*pp = prop->next;
-		free(prop->name);
+		free((char *)(prop->name));
 		data_free(prop->val);
 		free(prop);
 	}
diff --git a/scripts/dtc/data.c b/scripts/dtc/data.c
index 14734233ad8b..65c2a129eb09 100644
--- a/scripts/dtc/data.c
+++ b/scripts/dtc/data.c
@@ -164,15 +164,15 @@ struct data data_append_integer(struct data d, uint64_t value, int bits)
 
 	switch (bits) {
 	case 8:
-		value_8 = value;
+		value_8 = (uint8_t)value;
 		return data_append_data(d, &value_8, 1);
 
 	case 16:
-		value_16 = cpu_to_fdt16(value);
+		value_16 = cpu_to_fdt16((uint16_t)value);
 		return data_append_data(d, &value_16, 2);
 
 	case 32:
-		value_32 = cpu_to_fdt32(value);
+		value_32 = cpu_to_fdt32((uint32_t)value);
 		return data_append_data(d, &value_32, 4);
 
 	case 64:
diff --git a/scripts/dtc/dtc-lexer.l b/scripts/dtc/dtc-lexer.l
index 5568b4ae84cf..858946ba27a2 100644
--- a/scripts/dtc/dtc-lexer.l
+++ b/scripts/dtc/dtc-lexer.l
@@ -285,7 +285,7 @@ static bool pop_input_file(void)
 	return true;
 }
 
-static void lexical_error(const char *fmt, ...)
+static __attribute__ ((format(printf, 1, 2))) void lexical_error(const char *fmt, ...)
 {
 	va_list ap;
 
diff --git a/scripts/dtc/dtc.c b/scripts/dtc/dtc.c
index bc786c543b7e..e51e9efa4832 100644
--- a/scripts/dtc/dtc.c
+++ b/scripts/dtc/dtc.c
@@ -37,7 +37,7 @@ static void fill_fullpaths(struct node *tree, const char *prefix)
 
 	unit = strchr(tree->name, '@');
 	if (unit)
-		tree->basenamelen = unit - tree->name;
+		tree->basenamelen = (size_t)(unit - tree->name);
 	else
 		tree->basenamelen = strlen(tree->name);
 
@@ -170,7 +170,7 @@ int main(int argc, char *argv[])
 	const char *arg;
 	int opt;
 	FILE *outf = NULL;
-	int outversion = DEFAULT_FDT_VERSION;
+	unsigned int outversion = DEFAULT_FDT_VERSION;
 	long long cmdline_boot_cpuid = -1;
 
 	quiet      = 0;
@@ -191,7 +191,7 @@ int main(int argc, char *argv[])
 			outname = optarg;
 			break;
 		case 'V':
-			outversion = strtol(optarg, NULL, 0);
+			outversion = (unsigned int)strtol(optarg, NULL, 0);
 			break;
 		case 'd':
 			depname = optarg;
@@ -200,10 +200,10 @@ int main(int argc, char *argv[])
 			reservenum = strtoul(optarg, NULL, 0);
 			break;
 		case 'S':
-			minsize = strtol(optarg, NULL, 0);
+			minsize = (int)strtol(optarg, NULL, 0);
 			break;
 		case 'p':
-			padsize = strtol(optarg, NULL, 0);
+			padsize = (int)strtol(optarg, NULL, 0);
 			break;
 		case 'a':
 			alignsize = strtol(optarg, NULL, 0);
@@ -315,7 +315,7 @@ int main(int argc, char *argv[])
 	}
 
 	if (cmdline_boot_cpuid != -1)
-		dti->boot_cpuid_phys = cmdline_boot_cpuid;
+		dti->boot_cpuid_phys = (uint32_t)cmdline_boot_cpuid;
 
 	fill_fullpaths(dti->dt, "");
 
diff --git a/scripts/dtc/dtc.h b/scripts/dtc/dtc.h
index 0a1f54991026..97dedf10e6b8 100644
--- a/scripts/dtc/dtc.h
+++ b/scripts/dtc/dtc.h
@@ -124,7 +124,7 @@ static inline bool is_type_marker(enum markertype type)
 
 extern const char *markername(enum markertype markertype);
 
-struct  marker {
+struct marker {
 	enum markertype type;
 	unsigned int offset;
 	char *ref;
@@ -205,7 +205,7 @@ struct bus_type {
 
 struct property {
 	bool deleted;
-	char *name;
+	const char *name;
 	struct data val;
 
 	struct property *next;
@@ -216,7 +216,7 @@ struct property {
 
 struct node {
 	bool deleted;
-	char *name;
+	const char *name;
 	struct property *proplist;
 	struct node *children;
 
@@ -260,16 +260,16 @@ struct node {
 void add_label(struct label **labels, char *label);
 void delete_labels(struct label **labels);
 
-struct property *build_property(char *name, struct data val,
+struct property *build_property(const char *name, struct data val,
 				struct srcpos *srcpos);
-struct property *build_property_delete(char *name);
+struct property *build_property_delete(const char *name);
 struct property *chain_property(struct property *first, struct property *list);
 struct property *reverse_properties(struct property *first);
 
 struct node *build_node(struct property *proplist, struct node *children,
 			struct srcpos *srcpos);
 struct node *build_node_delete(struct srcpos *srcpos);
-struct node *name_node(struct node *node, char *name);
+struct node *name_node(struct node *node, const char *name);
 struct node *omit_node_if_unused(struct node *node);
 struct node *reference_node(struct node *node);
 struct node *chain_node(struct node *first, struct node *list);
@@ -277,10 +277,10 @@ struct node *merge_nodes(struct node *old_node, struct node *new_node);
 struct node *add_orphan_node(struct node *old_node, struct node *new_node, char *ref);
 
 void add_property(struct node *node, struct property *prop);
-void delete_property_by_name(struct node *node, char *name);
+void delete_property_by_name(struct node *node, const char *name);
 void delete_property(struct property *prop);
 void add_child(struct node *parent, struct node *child);
-void delete_node_by_name(struct node *parent, char *name);
+void delete_node_by_name(struct node *parent, const char *name);
 void delete_node(struct node *node);
 void append_to_property(struct node *node,
 			char *name, const void *data, int len,
diff --git a/scripts/dtc/libfdt/libfdt.h b/scripts/dtc/libfdt/libfdt.h
index ce31e844856a..429c99ac19ac 100644
--- a/scripts/dtc/libfdt/libfdt.h
+++ b/scripts/dtc/libfdt/libfdt.h
@@ -121,7 +121,8 @@ const void *fdt_offset_ptr(const void *fdt, int offset, unsigned int checklen);
 #endif
 static inline void *fdt_offset_ptr_w(void *fdt, int offset, int checklen)
 {
-	return (void *)(uintptr_t)fdt_offset_ptr(fdt, offset, checklen);
+	const void *p = fdt_offset_ptr(fdt, offset, checklen);
+	return (void *)(uintptr_t)p;
 }
 
 uint32_t fdt_next_tag(const void *fdt, int offset, int *nextoffset);
@@ -716,8 +717,8 @@ static inline struct fdt_property *fdt_get_property_w(void *fdt, int nodeoffset,
 						      const char *name,
 						      int *lenp)
 {
-	return (struct fdt_property *)(uintptr_t)
-		fdt_get_property(fdt, nodeoffset, name, lenp);
+	const void *p = fdt_get_property(fdt, nodeoffset, name, lenp);
+	return (struct fdt_property *)(uintptr_t)p;
 }
 
 /**
@@ -776,8 +777,9 @@ static inline void *fdt_getprop_namelen_w(void *fdt, int nodeoffset,
 					  const char *name, int namelen,
 					  int *lenp)
 {
-	return (void *)(uintptr_t)fdt_getprop_namelen(fdt, nodeoffset, name,
+	const void *p = fdt_getprop_namelen(fdt, nodeoffset, name,
 						      namelen, lenp);
+	return (void *)(uintptr_t)p;
 }
 #endif
 
@@ -814,7 +816,8 @@ const void *fdt_getprop(const void *fdt, int nodeoffset,
 static inline void *fdt_getprop_w(void *fdt, int nodeoffset,
 				  const char *name, int *lenp)
 {
-	return (void *)(uintptr_t)fdt_getprop(fdt, nodeoffset, name, lenp);
+	const void *p = fdt_getprop(fdt, nodeoffset, name, lenp);
+	return (void *)(uintptr_t)p;
 }
 
 /**
diff --git a/scripts/dtc/livetree.c b/scripts/dtc/livetree.c
index cc612370ec61..5f1ce8a6284b 100644
--- a/scripts/dtc/livetree.c
+++ b/scripts/dtc/livetree.c
@@ -36,7 +36,7 @@ void delete_labels(struct label **labels)
 		label->deleted = 1;
 }
 
-struct property *build_property(char *name, struct data val,
+struct property *build_property(const char *name, struct data val,
 				struct srcpos *srcpos)
 {
 	struct property *new = xmalloc(sizeof(*new));
@@ -50,7 +50,7 @@ struct property *build_property(char *name, struct data val,
 	return new;
 }
 
-struct property *build_property_delete(char *name)
+struct property *build_property_delete(const char *name)
 {
 	struct property *new = xmalloc(sizeof(*new));
 
@@ -116,7 +116,7 @@ struct node *build_node_delete(struct srcpos *srcpos)
 	return new;
 }
 
-struct node *name_node(struct node *node, char *name)
+struct node *name_node(struct node *node, const char *name)
 {
 	assert(node->name == NULL);
 
@@ -276,7 +276,7 @@ void add_property(struct node *node, struct property *prop)
 	*p = prop;
 }
 
-void delete_property_by_name(struct node *node, char *name)
+void delete_property_by_name(struct node *node, const char *name)
 {
 	struct property *prop = node->proplist;
 
@@ -309,7 +309,7 @@ void add_child(struct node *parent, struct node *child)
 	*p = child;
 }
 
-void delete_node_by_name(struct node *parent, char *name)
+void delete_node_by_name(struct node *parent, const char *name)
 {
 	struct node *node = parent->children;
 
@@ -665,7 +665,7 @@ static int cmp_reserve_info(const void *ax, const void *bx)
 static void sort_reserve_entries(struct dt_info *dti)
 {
 	struct reserve_info *ri, **tbl;
-	int n = 0, i = 0;
+	size_t n = 0, i = 0;
 
 	for (ri = dti->reservelist;
 	     ri;
@@ -704,7 +704,7 @@ static int cmp_prop(const void *ax, const void *bx)
 
 static void sort_properties(struct node *node)
 {
-	int n = 0, i = 0;
+	size_t n = 0, i = 0;
 	struct property *prop, **tbl;
 
 	for_each_property_withdel(node, prop)
@@ -740,7 +740,7 @@ static int cmp_subnode(const void *ax, const void *bx)
 
 static void sort_subnodes(struct node *node)
 {
-	int n = 0, i = 0;
+	size_t n = 0, i = 0;
 	struct node *subnode, **tbl;
 
 	for_each_child_withdel(node, subnode)
diff --git a/scripts/dtc/srcpos.c b/scripts/dtc/srcpos.c
index 4fdb22a019bd..5526ab8fe3d5 100644
--- a/scripts/dtc/srcpos.c
+++ b/scripts/dtc/srcpos.c
@@ -28,7 +28,7 @@ static char *get_dirname(const char *path)
 	const char *slash = strrchr(path, '/');
 
 	if (slash) {
-		int len = slash - path;
+		size_t len = (size_t)(slash - path);
 		char *dir = xmalloc(len + 1);
 
 		memcpy(dir, path, len);
diff --git a/scripts/dtc/treesource.c b/scripts/dtc/treesource.c
index 33fedee82d58..0e87749887da 100644
--- a/scripts/dtc/treesource.c
+++ b/scripts/dtc/treesource.c
@@ -141,12 +141,12 @@ static const char *delim_end[] = {
 
 static enum markertype guess_value_type(struct property *prop)
 {
-	int len = prop->val.len;
+	size_t len = prop->val.len;
 	const char *p = prop->val.val;
 	struct marker *m = prop->val.markers;
-	int nnotstring = 0, nnul = 0;
-	int nnotstringlbl = 0, nnotcelllbl = 0;
-	int i;
+	size_t nnotstring = 0, nnul = 0;
+	size_t nnotstringlbl = 0, nnotcelllbl = 0;
+	size_t i;
 
 	for (i = 0; i < len; i++) {
 		if (! isstring(p[i]))
-- 
