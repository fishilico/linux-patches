From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Fri, 3 Jul 2015 14:24:24 +0800
Subject: [PATCH] {NOT UPSTREAMABLE} Make scripts/dtc compile with all the
 enabled -Werror=...

TODO: send fixes to dtc upstream:
    https://git.kernel.org/cgit/utils/dtc/dtc.git/
    https://github.com/dgibson/dtc
---
 scripts/dtc/checks.c                | 20 ++++++++++----------
 scripts/dtc/data.c                  |  8 ++++----
 scripts/dtc/dtc-lexer.l             |  2 +-
 scripts/dtc/dtc-lexer.lex.c_shipped |  2 +-
 scripts/dtc/dtc.c                   | 14 +++++++-------
 scripts/dtc/dtc.h                   | 16 ++++++++--------
 scripts/dtc/fstree.c                |  2 +-
 scripts/dtc/libfdt/libfdt.h         | 13 ++++++++-----
 scripts/dtc/livetree.c              | 20 ++++++++++----------
 scripts/dtc/srcpos.c                |  2 +-
 scripts/dtc/treesource.c            | 16 ++++++++--------
 11 files changed, 59 insertions(+), 56 deletions(-)

diff --git a/scripts/dtc/checks.c b/scripts/dtc/checks.c
index 5adfc8f52b4f..8453db2e50e3 100644
--- a/scripts/dtc/checks.c
+++ b/scripts/dtc/checks.c
@@ -45,7 +45,7 @@ typedef void (*check_fn)(struct check *c, struct dt_info *dti, struct node *node
 struct check {
 	const char *name;
 	check_fn fn;
-	void *data;
+	const void *data;
 	bool warn, error;
 	enum checkstatus status;
 	bool inprogress;
@@ -164,7 +164,7 @@ static void check_is_string(struct check *c, struct dt_info *dti,
 			    struct node *node)
 {
 	struct property *prop;
-	char *propname = c->data;
+	const char *propname = c->data;
 
 	prop = get_property(node, propname);
 	if (!prop)
@@ -183,7 +183,7 @@ static void check_is_cell(struct check *c, struct dt_info *dti,
 			  struct node *node)
 {
 	struct property *prop;
-	char *propname = c->data;
+	const char *propname = c->data;
 
 	prop = get_property(node, propname);
 	if (!prop)
@@ -243,7 +243,7 @@ ERROR(duplicate_property_names, check_duplicate_property_names, NULL);
 static void check_node_name_chars(struct check *c, struct dt_info *dti,
 				  struct node *node)
 {
-	int n = strspn(node->name, c->data);
+	size_t n = strspn(node->name, c->data);
 
 	if (n < strlen(node->name))
 		FAIL(c, dti, "Bad character '%c' in node %s",
@@ -301,7 +301,7 @@ static void check_property_name_chars(struct check *c, struct dt_info *dti,
 	struct property *prop;
 
 	for_each_property(node, prop) {
-		int n = strspn(prop->name, c->data);
+		size_t n = strspn(prop->name, c->data);
 
 		if (n < strlen(prop->name))
 			FAIL(c, dti, "Bad character '%c' in property name \"%s\", node %s",
@@ -502,7 +502,7 @@ static void check_name_properties(struct check *c, struct dt_info *dti,
 		/* The name property is correct, and therefore redundant.
 		 * Delete it */
 		*pp = prop->next;
-		free(prop->name);
+		free((char *)(prop->name));
 		data_free(prop->val);
 		free(prop);
 	}
@@ -873,7 +873,7 @@ static void check_simple_bus_reg(struct check *c, struct dt_info *dti, struct no
 	while (size--)
 		reg = (reg << 32) | fdt32_to_cpu(*(cells++));
 
-	snprintf(unit_addr, sizeof(unit_addr), "%lx", reg);
+	snprintf(unit_addr, sizeof(unit_addr), "%llx", (unsigned long long)reg);
 	if (!streq(unitname, unit_addr))
 		FAIL(c, dti, "Node %s simple-bus unit address format error, expected \"%s\"",
 		     node->fullpath, unit_addr);
@@ -1005,7 +1005,7 @@ static void enable_warning_error(struct check *c, bool warn, bool error)
 
 static void disable_warning_error(struct check *c, bool warn, bool error)
 {
-	int i;
+	size_t i;
 
 	/* Lowering level, also lower it for things this is the prereq
 	 * for */
@@ -1026,7 +1026,7 @@ static void disable_warning_error(struct check *c, bool warn, bool error)
 
 void parse_checks_option(bool warn, bool error, const char *arg)
 {
-	int i;
+	size_t i;
 	const char *name = arg;
 	bool enable = true;
 
@@ -1053,7 +1053,7 @@ void parse_checks_option(bool warn, bool error, const char *arg)
 
 void process_checks(bool force, struct dt_info *dti)
 {
-	int i;
+	size_t i;
 	int error = 0;
 
 	for (i = 0; i < ARRAY_SIZE(check_table); i++) {
diff --git a/scripts/dtc/data.c b/scripts/dtc/data.c
index aa37a16c8891..033f12aca9c8 100644
--- a/scripts/dtc/data.c
+++ b/scripts/dtc/data.c
@@ -97,7 +97,7 @@ struct data data_copy_file(FILE *f, size_t maxlen)
 	while (!feof(f) && (d.len < maxlen)) {
 		size_t chunksize, ret;
 
-		if (maxlen == -1)
+		if (maxlen == (size_t)-1)
 			chunksize = 4096;
 		else
 			chunksize = maxlen - d.len;
@@ -177,15 +177,15 @@ struct data data_append_integer(struct data d, uint64_t value, int bits)
 
 	switch (bits) {
 	case 8:
-		value_8 = value;
+		value_8 = (uint8_t)value;
 		return data_append_data(d, &value_8, 1);
 
 	case 16:
-		value_16 = cpu_to_fdt16(value);
+		value_16 = cpu_to_fdt16((uint16_t)value);
 		return data_append_data(d, &value_16, 2);
 
 	case 32:
-		value_32 = cpu_to_fdt32(value);
+		value_32 = cpu_to_fdt32((uint32_t)value);
 		return data_append_data(d, &value_32, 4);
 
 	case 64:
diff --git a/scripts/dtc/dtc-lexer.l b/scripts/dtc/dtc-lexer.l
index fd825ebba69c..529b8feddebd 100644
--- a/scripts/dtc/dtc-lexer.l
+++ b/scripts/dtc/dtc-lexer.l
@@ -294,7 +294,7 @@ static bool pop_input_file(void)
 	return true;
 }
 
-static void lexical_error(const char *fmt, ...)
+static __attribute__ ((format(printf, 1, 2))) void lexical_error(const char *fmt, ...)
 {
 	va_list ap;
 
diff --git a/scripts/dtc/dtc-lexer.lex.c_shipped b/scripts/dtc/dtc-lexer.lex.c_shipped
index 64c243772398..71631d52f70c 100644
--- a/scripts/dtc/dtc-lexer.lex.c_shipped
+++ b/scripts/dtc/dtc-lexer.lex.c_shipped
@@ -2246,7 +2246,7 @@ static bool pop_input_file(void)
 	return true;
 }
 
-static void lexical_error(const char *fmt, ...)
+static __attribute__ ((format(printf, 1, 2))) void lexical_error(const char *fmt, ...)
 {
 	va_list ap;
 
diff --git a/scripts/dtc/dtc.c b/scripts/dtc/dtc.c
index f5eed9d72c02..a1891559e5e3 100644
--- a/scripts/dtc/dtc.c
+++ b/scripts/dtc/dtc.c
@@ -50,7 +50,7 @@ static void fill_fullpaths(struct node *tree, const char *prefix)
 
 	unit = strchr(tree->name, '@');
 	if (unit)
-		tree->basenamelen = unit - tree->name;
+		tree->basenamelen = (size_t)(unit - tree->name);
 	else
 		tree->basenamelen = strlen(tree->name);
 
@@ -176,7 +176,7 @@ int main(int argc, char *argv[])
 	const char *arg;
 	int opt;
 	FILE *outf = NULL;
-	int outversion = DEFAULT_FDT_VERSION;
+	unsigned int outversion = DEFAULT_FDT_VERSION;
 	long long cmdline_boot_cpuid = -1;
 
 	quiet      = 0;
@@ -197,19 +197,19 @@ int main(int argc, char *argv[])
 			outname = optarg;
 			break;
 		case 'V':
-			outversion = strtol(optarg, NULL, 0);
+			outversion = (unsigned int)strtol(optarg, NULL, 0);
 			break;
 		case 'd':
 			depname = optarg;
 			break;
 		case 'R':
-			reservenum = strtol(optarg, NULL, 0);
+			reservenum = (int)strtol(optarg, NULL, 0);
 			break;
 		case 'S':
-			minsize = strtol(optarg, NULL, 0);
+			minsize = (int)strtol(optarg, NULL, 0);
 			break;
 		case 'p':
-			padsize = strtol(optarg, NULL, 0);
+			padsize = (int)strtol(optarg, NULL, 0);
 			break;
 		case 'a':
 			alignsize = strtol(optarg, NULL, 0);
@@ -316,7 +316,7 @@ int main(int argc, char *argv[])
 	}
 
 	if (cmdline_boot_cpuid != -1)
-		dti->boot_cpuid_phys = cmdline_boot_cpuid;
+		dti->boot_cpuid_phys = (uint32_t)cmdline_boot_cpuid;
 
 	fill_fullpaths(dti->dt, "");
 	process_checks(force, dti);
diff --git a/scripts/dtc/dtc.h b/scripts/dtc/dtc.h
index fc24e17510fd..e5208c57577f 100644
--- a/scripts/dtc/dtc.h
+++ b/scripts/dtc/dtc.h
@@ -77,7 +77,7 @@ enum markertype {
 	LABEL,
 };
 
-struct  marker {
+struct marker {
 	enum markertype type;
 	int offset;
 	char *ref;
@@ -141,7 +141,7 @@ struct bus_type {
 
 struct property {
 	bool deleted;
-	char *name;
+	const char *name;
 	struct data val;
 
 	struct property *next;
@@ -151,7 +151,7 @@ struct property {
 
 struct node {
 	bool deleted;
-	char *name;
+	const char *name;
 	struct property *proplist;
 	struct node *children;
 
@@ -192,22 +192,22 @@ struct node {
 void add_label(struct label **labels, char *label);
 void delete_labels(struct label **labels);
 
-struct property *build_property(char *name, struct data val);
-struct property *build_property_delete(char *name);
+struct property *build_property(const char *name, struct data val);
+struct property *build_property_delete(const char *name);
 struct property *chain_property(struct property *first, struct property *list);
 struct property *reverse_properties(struct property *first);
 
 struct node *build_node(struct property *proplist, struct node *children);
 struct node *build_node_delete(void);
-struct node *name_node(struct node *node, char *name);
+struct node *name_node(struct node *node, const char *name);
 struct node *chain_node(struct node *first, struct node *list);
 struct node *merge_nodes(struct node *old_node, struct node *new_node);
 
 void add_property(struct node *node, struct property *prop);
-void delete_property_by_name(struct node *node, char *name);
+void delete_property_by_name(struct node *node, const char *name);
 void delete_property(struct property *prop);
 void add_child(struct node *parent, struct node *child);
-void delete_node_by_name(struct node *parent, char *name);
+void delete_node_by_name(struct node *parent, const char *name);
 void delete_node(struct node *node);
 void append_to_property(struct node *node,
 			char *name, const void *data, int len);
diff --git a/scripts/dtc/fstree.c b/scripts/dtc/fstree.c
index ae7d06c3c492..5c3a76f57516 100644
--- a/scripts/dtc/fstree.c
+++ b/scripts/dtc/fstree.c
@@ -60,7 +60,7 @@ static struct node *read_fstree(const char *dirname)
 			} else {
 				prop = build_property(xstrdup(de->d_name),
 						      data_copy_file(pfile,
-								     st.st_size));
+								     (size_t)st.st_size));
 				add_property(tree, prop);
 				fclose(pfile);
 			}
diff --git a/scripts/dtc/libfdt/libfdt.h b/scripts/dtc/libfdt/libfdt.h
index ba86caa73d01..650470a0f956 100644
--- a/scripts/dtc/libfdt/libfdt.h
+++ b/scripts/dtc/libfdt/libfdt.h
@@ -148,7 +148,8 @@ const void *fdt_offset_ptr(const void *fdt, int offset, unsigned int checklen);
 #endif
 static inline void *fdt_offset_ptr_w(void *fdt, int offset, int checklen)
 {
-	return (void *)(uintptr_t)fdt_offset_ptr(fdt, offset, checklen);
+	const void *p = fdt_offset_ptr(fdt, offset, checklen);
+	return (void *)(uintptr_t)p;
 }
 
 uint32_t fdt_next_tag(const void *fdt, int offset, int *nextoffset);
@@ -596,8 +597,8 @@ static inline struct fdt_property *fdt_get_property_w(void *fdt, int nodeoffset,
 						      const char *name,
 						      int *lenp)
 {
-	return (struct fdt_property *)(uintptr_t)
-		fdt_get_property(fdt, nodeoffset, name, lenp);
+	const void *p = fdt_get_property(fdt, nodeoffset, name, lenp);
+	return (struct fdt_property *)(uintptr_t)p;
 }
 
 /**
@@ -654,8 +655,9 @@ static inline void *fdt_getprop_namelen_w(void *fdt, int nodeoffset,
 					  const char *name, int namelen,
 					  int *lenp)
 {
-	return (void *)(uintptr_t)fdt_getprop_namelen(fdt, nodeoffset, name,
+	const void *p = fdt_getprop_namelen(fdt, nodeoffset, name,
 						      namelen, lenp);
+	return (void *)(uintptr_t)p;
 }
 #endif
 
@@ -692,7 +694,8 @@ const void *fdt_getprop(const void *fdt, int nodeoffset,
 static inline void *fdt_getprop_w(void *fdt, int nodeoffset,
 				  const char *name, int *lenp)
 {
-	return (void *)(uintptr_t)fdt_getprop(fdt, nodeoffset, name, lenp);
+	const void *p = fdt_getprop(fdt, nodeoffset, name, lenp);
+	return (void *)(uintptr_t)p;
 }
 
 /**
diff --git a/scripts/dtc/livetree.c b/scripts/dtc/livetree.c
index 3673de07e4e5..dfe64cbe6ad6 100644
--- a/scripts/dtc/livetree.c
+++ b/scripts/dtc/livetree.c
@@ -50,7 +50,7 @@ void delete_labels(struct label **labels)
 		label->deleted = 1;
 }
 
-struct property *build_property(char *name, struct data val)
+struct property *build_property(const char *name, struct data val)
 {
 	struct property *new = xmalloc(sizeof(*new));
 
@@ -62,7 +62,7 @@ struct property *build_property(char *name, struct data val)
 	return new;
 }
 
-struct property *build_property_delete(char *name)
+struct property *build_property_delete(const char *name)
 {
 	struct property *new = xmalloc(sizeof(*new));
 
@@ -125,7 +125,7 @@ struct node *build_node_delete(void)
 	return new;
 }
 
-struct node *name_node(struct node *node, char *name)
+struct node *name_node(struct node *node, const char *name)
 {
 	assert(node->name == NULL);
 
@@ -237,7 +237,7 @@ void add_property(struct node *node, struct property *prop)
 	*p = prop;
 }
 
-void delete_property_by_name(struct node *node, char *name)
+void delete_property_by_name(struct node *node, const char *name)
 {
 	struct property *prop = node->proplist;
 
@@ -270,7 +270,7 @@ void add_child(struct node *parent, struct node *child)
 	*p = child;
 }
 
-void delete_node_by_name(struct node *parent, char *name)
+void delete_node_by_name(struct node *parent, const char *name)
 {
 	struct node *node = parent->children;
 
@@ -511,7 +511,7 @@ struct node *get_node_by_phandle(struct node *tree, cell_t phandle)
 {
 	struct node *child, *node;
 
-	assert((phandle != 0) && (phandle != -1));
+	assert((phandle != 0) && (phandle != (cell_t)-1));
 
 	if (tree->phandle == phandle) {
 		if (tree->deleted)
@@ -542,7 +542,7 @@ cell_t get_node_phandle(struct node *root, struct node *node)
 {
 	static cell_t phandle = 1; /* FIXME: ick, static local */
 
-	if ((node->phandle != 0) && (node->phandle != -1))
+	if ((node->phandle != 0) && (node->phandle != (cell_t)-1))
 		return node->phandle;
 
 	while (get_node_by_phandle(root, phandle))
@@ -614,7 +614,7 @@ static int cmp_reserve_info(const void *ax, const void *bx)
 static void sort_reserve_entries(struct dt_info *dti)
 {
 	struct reserve_info *ri, **tbl;
-	int n = 0, i = 0;
+	size_t n = 0, i = 0;
 
 	for (ri = dti->reservelist;
 	     ri;
@@ -653,7 +653,7 @@ static int cmp_prop(const void *ax, const void *bx)
 
 static void sort_properties(struct node *node)
 {
-	int n = 0, i = 0;
+	size_t n = 0, i = 0;
 	struct property *prop, **tbl;
 
 	for_each_property_withdel(node, prop)
@@ -689,7 +689,7 @@ static int cmp_subnode(const void *ax, const void *bx)
 
 static void sort_subnodes(struct node *node)
 {
-	int n = 0, i = 0;
+	size_t n = 0, i = 0;
 	struct node *subnode, **tbl;
 
 	for_each_child_withdel(node, subnode)
diff --git a/scripts/dtc/srcpos.c b/scripts/dtc/srcpos.c
index 9d38459902f3..949630145db2 100644
--- a/scripts/dtc/srcpos.c
+++ b/scripts/dtc/srcpos.c
@@ -39,7 +39,7 @@ static char *get_dirname(const char *path)
 	const char *slash = strrchr(path, '/');
 
 	if (slash) {
-		int len = slash - path;
+		size_t len = (size_t)(slash - path);
 		char *dir = xmalloc(len + 1);
 
 		memcpy(dir, path, len);
diff --git a/scripts/dtc/treesource.c b/scripts/dtc/treesource.c
index 2461a3d068a0..dc243878eb40 100644
--- a/scripts/dtc/treesource.c
+++ b/scripts/dtc/treesource.c
@@ -64,7 +64,7 @@ static bool isstring(char c)
 static void write_propval_string(FILE *f, struct data val)
 {
 	const char *str = val.val;
-	int i;
+	size_t i;
 	struct marker *m = val.markers;
 
 	assert(str[val.len-1] == '\0');
@@ -142,9 +142,9 @@ static void write_propval_cells(FILE *f, struct data val)
 
 	fprintf(f, "<");
 	for (;;) {
-		while (m && (m->offset <= ((char *)cp - val.val))) {
+		while (m && (m->offset <= (size_t)((char *)cp - val.val))) {
 			if (m->type == LABEL) {
-				assert(m->offset == ((char *)cp - val.val));
+				assert(m->offset == (size_t)((char *)cp - val.val));
 				fprintf(f, "%s: ", m->ref);
 			}
 			m = m->next;
@@ -172,7 +172,7 @@ static void write_propval_bytes(FILE *f, struct data val)
 
 	fprintf(f, "[");
 	for (;;) {
-		while (m && (m->offset == (bp-val.val))) {
+		while (m && (m->offset == (size_t)(bp-val.val))) {
 			if (m->type == LABEL)
 				fprintf(f, "%s: ", m->ref);
 			m = m->next;
@@ -194,12 +194,12 @@ static void write_propval_bytes(FILE *f, struct data val)
 
 static void write_propval(FILE *f, struct property *prop)
 {
-	int len = prop->val.len;
+	size_t len = prop->val.len;
 	const char *p = prop->val.val;
 	struct marker *m = prop->val.markers;
-	int nnotstring = 0, nnul = 0;
-	int nnotstringlbl = 0, nnotcelllbl = 0;
-	int i;
+	size_t nnotstring = 0, nnul = 0;
+	size_t nnotstringlbl = 0, nnotcelllbl = 0;
+	size_t i;
 
 	if (len == 0) {
 		fprintf(f, ";\n");
-- 
