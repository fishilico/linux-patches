From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date: Mon, 2 Mar 2015 15:19:06 +0800
Subject: [PATCH] {CONSTIFY} init/do_mounts: constify a few things including
 sys_mount-related syscalls

---
 fs/namespace.c           | 14 +++++++-------
 include/linux/syscalls.h | 17 +++++++++--------
 init/do_mounts.c         |  4 ++--
 init/do_mounts.h         |  4 ++--
 4 files changed, 20 insertions(+), 19 deletions(-)

diff --git a/fs/namespace.c b/fs/namespace.c
index 6d49970ab39b..e34a5a733a69 100644
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@ -1628,7 +1628,7 @@ static inline bool may_mandlock(void)
  * unixes. Our API is identical to OSF/1 to avoid making a mess of AMD
  */
 
-int ksys_umount(char __user *name, int flags)
+int ksys_umount(const char __user *name, int flags)
 {
 	struct path path;
 	struct mount *mnt;
@@ -1668,7 +1668,7 @@ int ksys_umount(char __user *name, int flags)
 	return retval;
 }
 
-SYSCALL_DEFINE2(umount, char __user *, name, int, flags)
+SYSCALL_DEFINE2(umount, const char __user *, name, int, flags)
 {
 	return ksys_umount(name, flags);
 }
@@ -1678,7 +1678,7 @@ SYSCALL_DEFINE2(umount, char __user *, name, int, flags)
 /*
  *	The 2.0 compatible umount. No flags.
  */
-SYSCALL_DEFINE1(oldumount, char __user *, name)
+SYSCALL_DEFINE1(oldumount, const char __user *, name)
 {
 	return ksys_umount(name, 0);
 }
@@ -2989,8 +2989,8 @@ struct dentry *mount_subtree(struct vfsmount *mnt, const char *name)
 }
 EXPORT_SYMBOL(mount_subtree);
 
-int ksys_mount(char __user *dev_name, char __user *dir_name, char __user *type,
-	       unsigned long flags, void __user *data)
+int ksys_mount(const char __user *dev_name, const char __user *dir_name, const char __user *type,
+	       unsigned long flags, const void __user *data)
 {
 	int ret;
 	char *kernel_type;
@@ -3023,8 +3023,8 @@ int ksys_mount(char __user *dev_name, char __user *dir_name, char __user *type,
 	return ret;
 }
 
-SYSCALL_DEFINE5(mount, char __user *, dev_name, char __user *, dir_name,
-		char __user *, type, unsigned long, flags, void __user *, data)
+SYSCALL_DEFINE5(mount, const char __user *, dev_name, const char __user *, dir_name,
+		const char __user *, type, unsigned long, flags, const void __user *, data)
 {
 	return ksys_mount(dev_name, dir_name, type, flags, data);
 }
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 2ff814c92f7f..3bcb02e3e878 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -385,10 +385,10 @@ asmlinkage long sys_renameat(int olddfd, const char __user * oldname,
 			     int newdfd, const char __user * newname);
 
 /* fs/namespace.c */
-asmlinkage long sys_umount(char __user *name, int flags);
-asmlinkage long sys_mount(char __user *dev_name, char __user *dir_name,
-				char __user *type, unsigned long flags,
-				void __user *data);
+asmlinkage long sys_umount(const char __user *name, int flags);
+asmlinkage long sys_mount(const char __user *dev_name, const char __user *dir_name,
+				const char __user *type, unsigned long flags,
+				const void __user *data);
 asmlinkage long sys_pivot_root(const char __user *new_root,
 				const char __user *put_old);
 
@@ -1004,7 +1004,7 @@ asmlinkage long sys_vfork(void);
 asmlinkage long sys_recv(int, void __user *, size_t, unsigned);
 asmlinkage long sys_send(int, void __user *, size_t, unsigned);
 asmlinkage long sys_bdflush(int func, long data);
-asmlinkage long sys_oldumount(char __user *name);
+asmlinkage long sys_oldumount(const char __user *name);
 asmlinkage long sys_uselib(const char __user *library);
 asmlinkage long sys_sysctl(struct __sysctl_args __user *args);
 asmlinkage long sys_sysfs(int option,
@@ -1126,9 +1126,10 @@ asmlinkage long sys_ni_syscall(void);
  * the ksys_xyzyyz() functions prototyped below.
  */
 
-int ksys_mount(char __user *dev_name, char __user *dir_name, char __user *type,
-	       unsigned long flags, void __user *data);
-int ksys_umount(char __user *name, int flags);
+int ksys_mount(const char __user *dev_name, const char __user *dir_name,
+	       const char __user *type, unsigned long flags,
+	       const void __user *data);
+int ksys_umount(const char __user *name, int flags);
 int ksys_dup(unsigned int fildes);
 int ksys_chroot(const char __user *filename);
 ssize_t ksys_write(unsigned int fd, const char __user *buf, size_t count);
diff --git a/init/do_mounts.c b/init/do_mounts.c
index 4c377030f85b..17784e3419dc 100644
--- a/init/do_mounts.c
+++ b/init/do_mounts.c
@@ -350,7 +350,7 @@ static void __init get_fs_names(char *page)
 	*s = '\0';
 }
 
-static int __init do_mount_root(char *name, char *fs, int flags, void *data)
+static int __init do_mount_root(const char *name, const char *fs, int flags, const void *data)
 {
 	struct super_block *s;
 	int err = ksys_mount(name, "/root", fs, flags, data);
@@ -368,7 +368,7 @@ static int __init do_mount_root(char *name, char *fs, int flags, void *data)
 	return 0;
 }
 
-void __init mount_block_root(char *name, int flags)
+void __init mount_block_root(const char *name, int flags)
 {
 	struct page *page = alloc_page(GFP_KERNEL);
 	char *fs_names = page_address(page);
diff --git a/init/do_mounts.h b/init/do_mounts.h
index 8276acf9d20d..a6c83f81c03c 100644
--- a/init/do_mounts.h
+++ b/init/do_mounts.h
@@ -11,11 +11,11 @@
 
 __printf(1, 2)
 void  change_floppy(const char *fmt, ...);
-void  mount_block_root(char *name, int flags);
+void  mount_block_root(const char *name, int flags);
 void  mount_root(void);
 extern int root_mountflags;
 
-static inline int create_dev(char *name, dev_t dev)
+static inline int create_dev(const char *name, dev_t dev)
 {
 	ksys_unlink(name);
 	return ksys_mknod(name, S_IFBLK|0600, new_encode_dev(dev));
-- 
